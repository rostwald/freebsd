#!/bin/sh
#
# Copyright (c) 2016 Joe Maloney. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#       Email: Joe Maloney <jmaloney@ixsystems.com>
#

# Only run as superuser
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

show_usage()
{
  echo "usage: jinit jail [-n ip address interface] "
}

# Check for arguments
if [ -z $1 ] ; then
  show_usage
  exit 1
fi

# Define our arguments
jail_name=$1
jail_ip=$3
jail_iface=$4

# Detect the location of jail dataset
jail_dataset=`zfs list | grep ' /usr/jails$' | awk '{print $1}'`

# Detect the mountpoint for jail dataset
jail_path=`zfs list | grep $jail_dataset/$jail_name | awk '{print $5}'`

# Define the location for jail bootstrap
bootstrap=/usr/jails/.bootstrap

check_bootstrap()
{
  if [ ! -d "$bootstrap" ] ; then
     echo "Please run jbootstrap first!"
     exit 1
  else
  break
  fi  
}  

check_jail()
{
  if [ -d "$jail_path" ] ; then
    echo "Dataset $jail_dataset/$jail_name already exists!"
    exitstatus=1
      if [ -f /etc/conf.d/jail.$jail_name ] ; then
        echo "Configuration /etc/conf.d/jail.$jail_name already exists!"
        exitstatus=1
        if [ $exitstatus -ne 0 ] ; then
          echo "Nothing to do"
          exit 1
  else
    return 0
      fi
    fi
  fi
}

check_jail_name()
{
  echo "${jail_name}" | egrep -q '^[[:alnum:]]+$'
}

validate_jail_name()
{
  if check_jail_name "${jail_name}" ; then
    return 0
  else
    echo "No special characters are allowed in jail name!"
    exit 1
  fi
}

create_dataset()
{
  zfs create $jail_dataset/$jail_name
}

check_packages()
{
  if [ -f $bootstrap/fbsd-distrib.txz ] ; then
    return 0
  else
    echo "No packages found in ${bootstrap}.  You must run jbootstrap first!"
    return 0
  fi	
}

create_conf()
{
  jail_path=`zfs list | grep $jail_dataset/$jail_name | awk '{print $5}'`
  echo "Creating jail configuration in /etc/conf.d/jail.$jail_name"
  touch /etc/conf.d/jail.$jail_name
  chmod +x /etc/conf.d/jail.$jail_name
  echo 'jail_'${jail_name}'_rootdir="'${jail_path}'"' >> /etc/conf.d/jail.$jail_name
  echo 'jail_'${jail_name}'_hostname="'${jail_name}'"' >> /etc/conf.d/jail.$jail_name
  echo 'jail_'${jail_name}'_devfs_enable="'YES'"' >> /etc/conf.d/jail.$jail_name
  if [ ! -f /etc/conf.d/jail ] ; then
     touch /etc/conf.d/jail
     chmod +x /etc/conf.d/jail
  fi
  sysrc -f /etc/conf.d/jail jail_list+=" ${jail_name}"
}

check_ip()
{
  if [ -z ${jail_ip} ] ; then
    show_usage
    exit 1
  fi
}

validate_ip()
{
  if expr "${jail_ip}" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; 
  then
    return 0
  else
    show_usage
    exit 1
  fi
}

check_iface()
{
  if [ -z ${jail_iface} ] ; then
    show_usage
    exit 1
  fi
}

set_ip()
{
  echo 'jail_'${jail_name}'_ip="'${jail_ip}'"' >> /etc/conf.d/jail.$jail_name
}

set_iface()
{
  echo 'jail_'${jail_name}'_interface="'${jail_iface}'"' >> /etc/conf.d/jail.$jail_name
}

install_base()
{
  jail_path=`zfs list | grep $jail_dataset/$jail_name | awk '{print $5}'`
  ABI="FreeBSD:`uname -r | cut -d '.' -f 1`:`uname -m`"
  export ABI
  for mpnt in dev compat mnt proc root var/run
  do
    if [ ! -d "$jail_path/$mpnt" ] ; then
      mkdir -p $jail_path/$mpnt
    fi
  done
  mkdir -p $jail_path/packages
  mount_nullfs $bootstrap $jail_path/packages
  echo "Installing jail"
  tar -zxvf $bootstrap/fbsd-distrib.txz -C $jail_path etc
  for pkg in `ls $jail_path/packages/FreeBSD-*`
  do
    inspkg=$(basename $pkg)
    pkg -c $jail_path add -f /packages/$inspkg
    if [ $? -ne 0 ] ; then
      exit_err "Failed installing $inspkg!"
    fi
  done
  for pkg in `ls $jail_path/packages/All/pkg*`
  do
    inspkg=$(basename $pkg)
    pkg -c $jail_path add -f /packages/All/$inspkg
    if [ $? -ne 0 ] ; then
      exit_err "Failed installing $inspkg!"
    fi
  done
  for pkg in `ls $jail_path/packages/All/pc-updatemanager*`
  do
    inspkg=$(basename $pkg)
    pkg -c $jail_path add -f /packages/All/$inspkg
    if [ $? -ne 0 ] ; then
      exit_err "Failed installing $inspkg!"
    fi
  done
  umount -f $jail_path/packages
  cp /etc/resolv.conf $jail_path/etc >/dev/null 2>/dev/null
  chroot $jail_path pc-updatemanager syncconf >/dev/null 2>/dev/null
}

create_service()
{
  ln -s /etc/init.d/jail /etc/init.d/jail.$jail_name
  echo "Use service jail.$jail_name start to start jail"
}

# Check a few things before attempting to run
check_bootstrap
check_jail
check_packages

# Execute our functions
case $2 in
        -n)
        check_ip
	validate_ip
	check_iface
        set_ip
	set_iface
	;;
	"")
	break
	;;
	*)
	show_usage
	exit 1
        ;;
esac

case $1 in
        $jail_name)
	check_jail_name
	validate_jail_name
        create_dataset
        create_conf
        install_base
	create_service
        ;;
        *)
        show_usage
	exit 1
        ;;
esac
