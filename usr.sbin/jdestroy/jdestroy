#!/bin/sh
#
# Copyright (c) 2016 Joe Maloney. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
#       Email: Joe Maloney <jmaloney@ixsystems.com>
#

# Only run as superuser
if [ "$(id -u)" != "0" ]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

show_usage()
{
  echo "usage: jdestroy jail"
  exit 1
}

# Check for arguments
if [ -z $1 ] ; then
  show_usage
  exit 1
fi

# Define our arguments
jail_name=$1

# Detect the location of jail dataset
jail_dataset=`zfs list | grep ' /usr/jails$' | awk '{print $1}'`

# Detect the mountpoint for jail dataset
jail_path=`zfs list | grep $jail_dataset/$jail_name | awk '{print $5}'`

check_service()
{                                                                                     
  if [ -f /libexec/rc/init.d/started/jail.$jail_name ] ; then
    echo "Service jail.$jail_name must be stopped first!"
    exitstatus=1
      if [ $exitstatus -ne 0 ] ; then
      echo "Nothing to do"
      exit 1
  else
    return 0
    fi
  fi
}

check_jail()
{
  if [ ! -d "$jail_path" ] ; then
    echo "Dataset $jail_dataset/$jail_name does not exist!"
    exitstatus=1
      if [ ! -f /etc/conf.d/jail.$jail_name ] ; then
        echo "Configuration /etc/conf.d/jail.$jail_name does not exist!"
        exitstatus=1
          if [ $exitstatus -ne 0 ] ; then
          echo "Nothing to do"
          exit 1
  else
  return 0
      fi
    fi
  fi
}

destroy_dataset()
{
  zfs destroy -f $jail_dataset/$jail_name
}

delete_config()
{
  rm /etc/conf.d/jail.$jail_name
  sysrc -f /etc/conf.d/jail jail_list-=" ${jail_name}"
}

remove_service()
{
  rm /etc/init.d/jail.$jail_name
}

destroy_jail()
{
  while true; do
      read -p "Do you wish to destroy $jail_dataset/$jail_name?" yn
      case $yn in
          [Yy]* ) destroy_dataset; delete_config; remove_service; break;;
          [Nn]* ) exit;;
          * ) echo "Please answer yes or no.";;
      esac
  done
}

destroy_jail_prompt()
{
  while true; do
      read -p "Do you wish to destroy $jail_dataset/$jail_name?" yn
      case $yn in
          [Yy]* ) destroy_dataset; delete_config; remove_service; break;;
          [Nn]* ) exit;;
          * ) echo "Please answer yes or no.";;
      esac
  done
}

# Execute our functions
case $2 in
	-y)
	check_service
	check_jail
	destroy_dataset
	delete_config
	remove_service
	;;
	*)
	check_service
	check_jail
	destroy_jail_prompt
	;;
esac
	
case $1 in
        $jail_name)
        ;;
        *)
        show_usage
        ;;
esac
