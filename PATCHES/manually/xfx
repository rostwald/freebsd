diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/net/vnet.h trunk-clean/sys/net/vnet.h
--- 10.0.0-stripped/sys/net/vnet.h	2014-01-15 14:20:21.000000000 +0100
+++ trunk-clean/sys/net/vnet.h	2014-01-15 14:31:33.000000000 +0100
@@ -64,16 +64,8 @@
  */
 #if defined(_KERNEL) || defined(_WANT_VNET)
 #include <sys/queue.h>
-
-struct vnet {
-	LIST_ENTRY(vnet)	 vnet_le;	/* all vnets list */
-	u_int			 vnet_magic_n;
-	u_int			 vnet_ifcnt;
-	u_int			 vnet_sockcnt;
-	void			*vnet_data_mem;
-	uintptr_t		 vnet_data_base;
-};
-#define	VNET_MAGIC_N	0x3e0d8f29
+#include <sys/sysctl.h>
+#include <sys/vnet2.h>
 
 /*
  * These two virtual network stack allocator definitions are also required
@@ -142,17 +134,6 @@ SYSCTL_VNET_PROC(parent, nbr, name, CTLT
 #include <sys/sx.h>
 
 /*
- * Location of the kernel's 'set_vnet' linker set.
- */
-extern uintptr_t	*__start_set_vnet;
-__GLOBL(__start_set_vnet);
-extern uintptr_t	*__stop_set_vnet;
-__GLOBL(__stop_set_vnet);
-
-#define	VNET_START	(uintptr_t)&__start_set_vnet
-#define	VNET_STOP	(uintptr_t)&__stop_set_vnet
-
-/*
  * Functions to allocate and destroy virtual network stacks.
  */
 struct vnet *vnet_alloc(void);
@@ -230,6 +211,7 @@ extern struct vnet *vnet0;
 #define	IS_DEFAULT_VNET(arg)	((arg) == vnet0)
 
 #define	CRED_TO_VNET(cr)	(cr)->cr_prison->pr_vnet
+
 #define	TD_TO_VNET(td)		CRED_TO_VNET((td)->td_ucred)
 #define	P_TO_VNET(p)		CRED_TO_VNET((p)->p_ucred)
 
@@ -255,27 +237,6 @@ extern struct sx vnet_sxlock;
 #define	VNET_FOREACH(arg)	LIST_FOREACH((arg), &vnet_head, vnet_le)
 
 /*
- * Virtual network stack memory allocator, which allows global variables to
- * be automatically instantiated for each network stack instance.
- */
-#define	VNET_NAME(n)		vnet_entry_##n
-#define	VNET_DECLARE(t, n)	extern t VNET_NAME(n)
-#define	VNET_DEFINE(t, n)	t VNET_NAME(n) __section(VNET_SETNAME) __used
-#define	_VNET_PTR(b, n)		(__typeof(VNET_NAME(n))*)		\
-				    ((b) + (uintptr_t)&VNET_NAME(n))
-
-#define	_VNET(b, n)		(*_VNET_PTR(b, n))
-
-/*
- * Virtualized global variable accessor macros.
- */
-#define	VNET_VNET_PTR(vnet, n)		_VNET_PTR((vnet)->vnet_data_base, n)
-#define	VNET_VNET(vnet, n)		(*VNET_VNET_PTR((vnet), n))
-
-#define	VNET_PTR(n)		VNET_VNET_PTR(curvnet, n)
-#define	VNET(n)			VNET_VNET(curvnet, n)
-
-/*
  * Virtual network stack allocator interfaces from the kernel linker.
  */
 void	*vnet_data_alloc(int size);
@@ -289,11 +250,68 @@ void	 vnet_data_free(void *start_arg, in
  * Note: SYSCTL_PROC() handler functions will need to resolve pointer
  * arguments themselves, if required.
  */
-#ifdef SYSCTL_OID
+//#ifdef SYSCTL_OID
 int	vnet_sysctl_handle_int(SYSCTL_HANDLER_ARGS);
 int	vnet_sysctl_handle_opaque(SYSCTL_HANDLER_ARGS);
 int	vnet_sysctl_handle_string(SYSCTL_HANDLER_ARGS);
 int	vnet_sysctl_handle_uint(SYSCTL_HANDLER_ARGS);
+int	vnet_sysctl_handle_long(SYSCTL_HANDLER_ARGS);
+int	vnet_sysctl_handle_ulong(SYSCTL_HANDLER_ARGS);
+
+#ifdef VPS
+
+#define	_SYSCTL_VNET_INT(parent, nbr, name, access, ptr, val, descr, vps0)	\
+	_SYSCTL_OID(parent, nbr, name,					\
+	    CTLTYPE_INT|CTLFLAG_MPSAFE|CTLFLAG_VNET|(access),		\
+	    ptr, val, vnet_sysctl_handle_int, "I", descr, vps0)
+#define	_SYSCTL_VNET_PROC(parent, nbr, name, access, ptr, arg, handler,	\
+	    fmt, descr, vps0)							\
+	_SYSCTL_OID(parent, nbr, name, CTLFLAG_VNET|(access), ptr, arg, 	\
+	    handler, fmt, descr, vps0)
+#define	_SYSCTL_VNET_OPAQUE(parent, nbr, name, access, ptr, len, fmt,	\
+	    descr, vps0)						\
+	_SYSCTL_OID(parent, nbr, name,					\
+	    CTLTYPE_OPAQUE|CTLFLAG_VNET|(access), ptr, len, 		\
+	    vnet_sysctl_handle_opaque, fmt, descr, vps0)
+#define	_SYSCTL_VNET_STRING(parent, nbr, name, access, arg, len, descr, vps0)	\
+	_SYSCTL_OID(parent, nbr, name,					\
+	    CTLTYPE_STRING|CTLFLAG_VNET|(access),			\
+	    arg, len, vnet_sysctl_handle_string, "A", descr, vps0)
+#define	_SYSCTL_VNET_STRUCT(parent, nbr, name, access, ptr, type, descr, vps0)	\
+	_SYSCTL_OID(parent, nbr, name,					\
+	    CTLTYPE_OPAQUE|CTLFLAG_VNET|(access), ptr,			\
+	    sizeof(struct type), vnet_sysctl_handle_opaque, "S," #type,	\
+	    descr, vps0)
+#define	_SYSCTL_VNET_UINT(parent, nbr, name, access, ptr, val, descr, vps0)	\
+	_SYSCTL_OID(parent, nbr, name,					\
+	    CTLTYPE_UINT|CTLFLAG_MPSAFE|CTLFLAG_VNET|(access),		\
+	    ptr, val, vnet_sysctl_handle_uint, "IU", descr, vps0)
+#define	_SYSCTL_VNET_ULONG(parent, nbr, name, access, ptr, val, descr, vps0)	\
+	_SYSCTL_OID(parent, nbr, name,					\
+	    CTLTYPE_ULONG|CTLFLAG_MPSAFE|CTLFLAG_VNET|(access),		\
+	    ptr, val, vnet_sysctl_handle_long, "LU", descr, vps0)
+#define	VNET_SYSCTL_ARG(req, arg1) do {					\
+	if (arg1 != NULL)						\
+		arg1 = (void *)(TD_TO_VNET((req)->td)->vnet_data_base +	\
+		    (uintptr_t)(arg1));					\
+} while (0)
+
+#define SYSCTL_VNET_INT(parent, nbr, name, access, ptr, val, descr) \
+	_SYSCTL_VNET_INT(parent, nbr, name, access, ptr, val, descr, VPS_PUBLIC)
+#define SYSCTL_VNET_PROC(parent, nbr, name, access, ptr, arg, handler, fmt, descr) \
+	_SYSCTL_VNET_PROC(parent, nbr, name, access, ptr, arg, handler, fmt, descr, VPS_PUBLIC)
+#define SYSCTL_VNET_OPAQUE(parent, nbr, name, access, ptr, len, fmt, descr) \
+	_SYSCTL_VNET_OPAQUE(parent, nbr, name, access, ptr, len, fmt, descr, VPS_PUBLIC)
+#define SYSCTL_VNET_STRING(parent, nbr, name, access, arg, len, descr) \
+	_SYSCTL_VNET_STRING(parent, nbr, name, access, arg, len, descr, VPS_PUBLIC)
+#define SYSCTL_VNET_STRUCT(parent, nbr, name, access, ptr, type, descr) \
+	_SYSCTL_VNET_STRUCT(parent, nbr, name, access, ptr, type, descr, VPS_PUBLIC)
+#define SYSCTL_VNET_UINT(parent, nbr, name, access, ptr, val, descr) \
+	_SYSCTL_VNET_UINT(parent, nbr, name, access, ptr, val, descr, VPS_PUBLIC)
+#define SYSCTL_VNET_ULONG(parent, nbr, name, access, ptr, val, descr) \
+	_SYSCTL_VNET_ULONG(parent, nbr, name, access, ptr, val, descr, VPS_PUBLIC)
+
+#else /* VPS */
 
 #define	SYSCTL_VNET_INT(parent, nbr, name, access, ptr, val, descr)	\
 	SYSCTL_OID(parent, nbr, name,					\
@@ -322,12 +340,19 @@ int	vnet_sysctl_handle_uint(SYSCTL_HANDL
 	SYSCTL_OID(parent, nbr, name,					\
 	    CTLTYPE_UINT|CTLFLAG_MPSAFE|CTLFLAG_VNET|(access),		\
 	    ptr, val, vnet_sysctl_handle_uint, "IU", descr)
+#define	SYSCTL_VNET_ULONG(parent, nbr, name, access, ptr, val, descr)	\
+	SYSCTL_OID(parent, nbr, name,					\
+	    CTLTYPE_ULONG|CTLFLAG_MPSAFE|CTLFLAG_VNET|(access),		\
+	    ptr, val, vnet_sysctl_handle_ulong, "LU", descr)
 #define	VNET_SYSCTL_ARG(req, arg1) do {					\
 	if (arg1 != NULL)						\
 		arg1 = (void *)(TD_TO_VNET((req)->td)->vnet_data_base +	\
 		    (uintptr_t)(arg1));					\
 } while (0)
-#endif /* SYSCTL_OID */
+
+#endif /* !VPS */
+
+//#endif /* SYSCTL_OID */
 
 /*
  * Virtual sysinit mechanism, allowing network stack components to declare
@@ -434,28 +459,10 @@ do {									\
 #define	P_TO_VNET(p)		NULL
 
 /*
- * Versions of the VNET macros that compile to normal global variables and
- * standard sysctl definitions.
- */
-#define	VNET_NAME(n)		n
-#define	VNET_DECLARE(t, n)	extern t n
-#define	VNET_DEFINE(t, n)	t n
-#define	_VNET_PTR(b, n)		&VNET_NAME(n)
-
-/*
- * Virtualized global variable accessor macros.
- */
-#define	VNET_VNET_PTR(vnet, n)		(&(n))
-#define	VNET_VNET(vnet, n)		(n)
-
-#define	VNET_PTR(n)		(&(n))
-#define	VNET(n)			(n)
-
-/*
  * When VIMAGE isn't compiled into the kernel, virtaulized SYSCTLs simply
  * become normal SYSCTLs.
  */
-#ifdef SYSCTL_OID
+//#ifdef SYSCTL_OID
 #define	SYSCTL_VNET_INT(parent, nbr, name, access, ptr, val, descr)	\
 	SYSCTL_INT(parent, nbr, name, access, ptr, val, descr)
 #define	SYSCTL_VNET_PROC(parent, nbr, name, access, ptr, arg, handler,	\
@@ -471,8 +478,10 @@ do {									\
 	SYSCTL_STRUCT(parent, nbr, name, access, ptr, type, descr)
 #define	SYSCTL_VNET_UINT(parent, nbr, name, access, ptr, val, descr)	\
 	SYSCTL_UINT(parent, nbr, name, access, ptr, val, descr)
+#define	SYSCTL_VNET_ULONG(parent, nbr, name, access, ptr, val, descr)	\
+	SYSCTL_ULONG(parent, nbr, name, access, ptr, val, descr)
 #define	VNET_SYSCTL_ARG(req, arg1)
-#endif /* SYSCTL_OID */
+//#endif /* SYSCTL_OID */
 
 /*
  * When VIMAGE isn't compiled into the kernel, VNET_SYSINIT/VNET_SYSUNINIT
