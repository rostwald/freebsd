diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/kern/sys_process.c trunk-clean/sys/kern/sys_process.c
--- 10.0.0-stripped/sys/kern/sys_process.c	2014-01-15 14:20:23.000000000 +0100
+++ trunk-clean/sys/kern/sys_process.c	2014-01-15 14:31:10.000000000 +0100
@@ -64,6 +64,8 @@ __FBSDID("$FreeBSD: release/10.0.0/sys/k
 #include <vm/vm_page.h>
 #include <vm/vm_param.h>
 
+#include <vps/vps.h>
+
 #ifdef COMPAT_FREEBSD32
 #include <sys/procfs.h>
 #include <compat/freebsd32/freebsd32_signal.h>
@@ -661,7 +663,7 @@ kern_ptrace(struct thread *td, int req, 
 	case PT_SYSCALL:
 	case PT_FOLLOW_FORK:
 	case PT_DETACH:
-		sx_xlock(&proctree_lock);
+		sx_xlock(&V_proctree_lock);
 		proctree_locked = 1;
 		break;
 	default:
@@ -676,14 +678,14 @@ kern_ptrace(struct thread *td, int req, 
 		if (pid <= PID_MAX) {
 			if ((p = pfind(pid)) == NULL) {
 				if (proctree_locked)
-					sx_xunlock(&proctree_lock);
+					sx_xunlock(&V_proctree_lock);
 				return (ESRCH);
 			}
 		} else {
 			td2 = tdfind(pid, -1);
 			if (td2 == NULL) {
 				if (proctree_locked)
-					sx_xunlock(&proctree_lock);
+					sx_xunlock(&V_proctree_lock);
 				return (ESRCH);
 			}
 			p = td2->td_proc;
@@ -841,10 +843,23 @@ kern_ptrace(struct thread *td, int req, 
 		 * on a "detach".
 		 */
 		p->p_flag |= P_TRACED;
+#ifdef VPS
+		if (p->p_pptr == NULL) {
+			p->p_oppid = 0;
+			LIST_INSERT_HEAD(&td->td_proc->p_children, p, p_sibling);
+			p->p_pptr = td->td_proc;
+		} else {
+			p->p_oppid = p->p_pptr->p_pid;
+			if (p->p_pptr != td->td_proc) {
+				proc_reparent(p, td->td_proc);
+			}
+		}
+#else
 		p->p_oppid = p->p_pptr->p_pid;
 		if (p->p_pptr != td->td_proc) {
 			proc_reparent(p, td->td_proc);
 		}
+#endif /* !VPS */
 		data = SIGSTOP;
 		goto sendsig;	/* in PT_CONTINUE below */
 
@@ -916,6 +931,16 @@ kern_ptrace(struct thread *td, int req, 
 			break;
 		case PT_DETACH:
 			/* reset process parent */
+#ifdef VPS
+			if (p->p_oppid == 0) {
+				PROC_LOCK(p->p_pptr);
+				sigqueue_take(p->p_ksi);
+				PROC_UNLOCK(p->p_pptr);
+
+				LIST_REMOVE(p, p_sibling);
+				p->p_pptr = NULL;
+			} else 
+#endif /* VPS */
 			if (p->p_oppid != p->p_pptr->p_pid) {
 				struct proc *pp;
 
@@ -926,12 +951,12 @@ kern_ptrace(struct thread *td, int req, 
 				PROC_UNLOCK(p);
 				pp = pfind(p->p_oppid);
 				if (pp == NULL)
-					pp = initproc;
+					pp = V_initproc;
 				else
 					PROC_UNLOCK(pp);
 				PROC_LOCK(p);
 				proc_reparent(p, pp);
-				if (pp == initproc)
+				if (pp == V_initproc)
 					p->p_sigparent = SIGCHLD;
 			}
 			p->p_oppid = 0;
@@ -944,7 +969,7 @@ kern_ptrace(struct thread *td, int req, 
 
 	sendsig:
 		if (proctree_locked) {
-			sx_xunlock(&proctree_lock);
+			sx_xunlock(&V_proctree_lock);
 			proctree_locked = 0;
 		}
 		p->p_xstat = data;
@@ -1217,7 +1242,7 @@ out:
 fail:
 	PROC_UNLOCK(p);
 	if (proctree_locked)
-		sx_xunlock(&proctree_lock);
+		sx_xunlock(&V_proctree_lock);
 	return (error);
 }
 #undef PROC_READ
@@ -1269,7 +1294,7 @@ protect_setchildren(struct thread *td, s
 
 	p = top;
 	ret = 0;
-	sx_assert(&proctree_lock, SX_LOCKED);
+	sx_assert(&V_proctree_lock, SX_LOCKED);
 	for (;;) {
 		ret |= protect_setchild(td, p, flags);
 		PROC_UNLOCK(p);
@@ -1373,7 +1398,7 @@ kern_procctl(struct thread *td, idtype_t
 	struct proc *p;
 	int error, first_error, ok;
 
-	sx_slock(&proctree_lock);
+	sx_slock(&V_proctree_lock);
 	switch (idtype) {
 	case P_PID:
 		p = pfind(id);
@@ -1432,6 +1457,6 @@ kern_procctl(struct thread *td, idtype_t
 		error = EINVAL;
 		break;
 	}
-	sx_sunlock(&proctree_lock);
+	sx_sunlock(&V_proctree_lock);
 	return (error);
 }
