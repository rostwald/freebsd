diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/kern/kern_sysctl.c trunk-clean/sys/kern/kern_sysctl.c
--- 10.0.0-stripped/sys/kern/kern_sysctl.c	2014-01-15 14:20:23.000000000 +0100
+++ trunk-clean/sys/kern/kern_sysctl.c	2014-01-15 14:31:10.000000000 +0100
@@ -64,6 +64,9 @@ __FBSDID("$FreeBSD: release/10.0.0/sys/k
 
 #include <net/vnet.h>
 
+#include <vps/vps.h>
+#include <vps/vps2.h>
+
 #include <security/mac/mac_framework.h>
 
 #include <vm/vm.h>
@@ -463,7 +466,9 @@ sysctl_remove_oid_locked(struct sysctl_o
 struct sysctl_oid *
 sysctl_add_oid(struct sysctl_ctx_list *clist, struct sysctl_oid_list *parent,
 	int number, const char *name, int kind, void *arg1, intptr_t arg2,
-	int (*handler)(SYSCTL_HANDLER_ARGS), const char *fmt, const char *descr)
+	int (*handler)(SYSCTL_HANDLER_ARGS), const char *fmt, const char *descr,
+	u_int8_t vps0
+	)
 {
 	struct sysctl_oid *oidp;
 
@@ -508,6 +513,9 @@ sysctl_add_oid(struct sysctl_ctx_list *c
 	oidp->oid_fmt = fmt;
 	if (descr)
 		oidp->oid_descr = strdup(descr, M_SYSCTLOID);
+#ifdef VPS
+	oidp->vps0 = vps0;
+#endif
 	/* Update the context, if used */
 	if (clist != NULL)
 		sysctl_ctx_entry_add(clist, oidp);
@@ -721,8 +729,8 @@ sysctl_sysctl_name(SYSCTL_HANDLER_ARGS)
  * XXXRW/JA: Shouldn't return name data for nodes that we don't permit in
  * capability mode.
  */
-static SYSCTL_NODE(_sysctl, 1, name, CTLFLAG_RD | CTLFLAG_CAPRD,
-    sysctl_sysctl_name, "");
+static _SYSCTL_NODE(_sysctl, 1, name, CTLFLAG_RD | CTLFLAG_CAPRD,
+    sysctl_sysctl_name, "", VPS_PUBLIC);
 
 static int
 sysctl_sysctl_next_ls(struct sysctl_oid_list *lsp, int *name, u_int namelen, 
@@ -807,8 +815,8 @@ sysctl_sysctl_next(SYSCTL_HANDLER_ARGS)
  * XXXRW/JA: Shouldn't return next data for nodes that we don't permit in
  * capability mode.
  */
-static SYSCTL_NODE(_sysctl, 2, next, CTLFLAG_RD | CTLFLAG_CAPRD,
-    sysctl_sysctl_next, "");
+static _SYSCTL_NODE(_sysctl, 2, next, CTLFLAG_RD | CTLFLAG_CAPRD,
+    sysctl_sysctl_next, "", VPS_PUBLIC);
 
 static int
 name2oid(char *name, int *oid, int *len, struct sysctl_oid **oidpp)
@@ -888,9 +896,9 @@ sysctl_sysctl_name2oid(SYSCTL_HANDLER_AR
  * XXXRW/JA: Shouldn't return name2oid data for nodes that we don't permit in
  * capability mode.
  */
-SYSCTL_PROC(_sysctl, 3, name2oid,
+_SYSCTL_PROC(_sysctl, 3, name2oid,
     CTLTYPE_INT | CTLFLAG_RW | CTLFLAG_ANYBODY | CTLFLAG_MPSAFE
-    | CTLFLAG_CAPRW, 0, 0, sysctl_sysctl_name2oid, "I", "");
+    | CTLFLAG_CAPRW, 0, 0, sysctl_sysctl_name2oid, "I", "", VPS_PUBLIC);
 
 static int
 sysctl_sysctl_oidfmt(SYSCTL_HANDLER_ARGS)
@@ -917,8 +925,8 @@ sysctl_sysctl_oidfmt(SYSCTL_HANDLER_ARGS
 }
 
 
-static SYSCTL_NODE(_sysctl, 4, oidfmt, CTLFLAG_RD|CTLFLAG_MPSAFE|CTLFLAG_CAPRD,
-    sysctl_sysctl_oidfmt, "");
+static _SYSCTL_NODE(_sysctl, 4, oidfmt, CTLFLAG_RD|CTLFLAG_MPSAFE|CTLFLAG_CAPRD,
+    sysctl_sysctl_oidfmt, "", VPS_PUBLIC);
 
 static int
 sysctl_sysctl_oiddescr(SYSCTL_HANDLER_ARGS)
@@ -941,8 +949,8 @@ sysctl_sysctl_oiddescr(SYSCTL_HANDLER_AR
 	return (error);
 }
 
-static SYSCTL_NODE(_sysctl, 5, oiddescr, CTLFLAG_RD|CTLFLAG_CAPRD,
-    sysctl_sysctl_oiddescr, "");
+static _SYSCTL_NODE(_sysctl, 5, oiddescr, CTLFLAG_RD|CTLFLAG_CAPRD,
+    sysctl_sysctl_oiddescr, "", VPS_PUBLIC);
 
 /*
  * Default "handler" functions.
@@ -1418,6 +1426,16 @@ sysctl_root(SYSCTL_HANDLER_ARGS)
 	if (error)
 		return (error);
 
+#ifdef VPS
+	if (req->td->td_vps != vps0 && oid->vps0 != 0) {
+
+		DBGCORE("%s: hiding [%s (%s)]\n",
+			__func__, oid->oid_name, oid->oid_descr);
+
+		return (ENOENT);
+	}
+#endif
+
 	if ((oid->oid_kind & CTLTYPE) == CTLTYPE_NODE) {
 		/*
 		 * You can't call a sysctl when it's a node, but has
