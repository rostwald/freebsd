diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/kern/vfs_syscalls.c trunk-clean/sys/kern/vfs_syscalls.c
--- 10.0.0-stripped/sys/kern/vfs_syscalls.c	2014-01-15 14:20:22.000000000 +0100
+++ trunk-clean/sys/kern/vfs_syscalls.c	2014-01-15 14:31:10.000000000 +0100
@@ -77,6 +77,9 @@ __FBSDID("$FreeBSD: release/10.0.0/sys/k
 #include <sys/ktrace.h>
 #endif
 
+#include <vps/vps.h>
+#include <vps/vps2.h>
+
 #include <machine/stdarg.h>
 
 #include <security/audit/audit.h>
@@ -144,7 +147,11 @@ sys_sync(td, uap)
 			continue;
 		}
 		if ((mp->mnt_flag & MNT_RDONLY) == 0 &&
-		    vn_start_write(NULL, &mp, V_NOWAIT) == 0) {
+#ifdef VPS
+		    vps_canseemount(td->td_ucred, mp) == 0 &&
+#endif /*VPS*/
+		    vn_start_write(NULL, &mp, V_NOWAIT) == 0
+		    ) {
 			save = curthread_pflags_set(TDP_SYNCIO);
 			vfs_msync(mp, MNT_NOWAIT);
 			VFS_SYNC(mp, MNT_NOWAIT);
@@ -196,6 +203,12 @@ sys_quotactl(td, uap)
 	mp = nd.ni_vp->v_mount;
 	vfs_ref(mp);
 	vput(nd.ni_vp);
+#ifdef VPS
+	if (td->td_vps != vps0 && td->td_vps != mp->mnt_vps) {
+		vfs_rel(mp);
+		return (EPERM);
+	}
+#endif
 	error = vfs_busy(mp, 0);
 	vfs_rel(mp);
 	if (error != 0)
@@ -322,9 +335,18 @@ kern_statfs(struct thread *td, char *pat
 	error = VFS_STATFS(mp, sp);
 	if (error != 0)
 		goto out;
-	if (priv_check(td, PRIV_VFS_GENERATION)) {
+#ifdef VPS
+	if (td->td_ucred->cr_vps != vps0) {
 		bcopy(sp, &sb, sizeof(sb));
 		sb.f_fsid.val[0] = sb.f_fsid.val[1] = 0;
+		vps_statfs(td->td_ucred, mp, &sb);
+		sp = &sb;
+	}
+#endif
+	if (priv_check(td, PRIV_VFS_GENERATION)) {
+		if (sp != &sb)
+			bcopy(sp, &sb, sizeof(sb));
+		sb.f_fsid.val[0] = sb.f_fsid.val[1] = 0;
 		prison_enforce_statfs(td->td_ucred, mp, &sb);
 		sp = &sb;
 	}
@@ -408,9 +430,18 @@ kern_fstatfs(struct thread *td, int fd, 
 	error = VFS_STATFS(mp, sp);
 	if (error != 0)
 		goto out;
-	if (priv_check(td, PRIV_VFS_GENERATION)) {
+#ifdef VPS
+	if (td->td_ucred->cr_vps != vps0) {
 		bcopy(sp, &sb, sizeof(sb));
 		sb.f_fsid.val[0] = sb.f_fsid.val[1] = 0;
+		vps_statfs(td->td_ucred, mp, &sb);
+		sp = &sb;
+	}
+#endif
+	if (priv_check(td, PRIV_VFS_GENERATION)) {
+		if (sp != &sb)
+			bcopy(sp, &sb, sizeof(sb));
+		sb.f_fsid.val[0] = sb.f_fsid.val[1] = 0;
 		prison_enforce_statfs(td->td_ucred, mp, &sb);
 		sp = &sb;
 	}
@@ -483,6 +514,12 @@ kern_getfsstat(struct thread *td, struct
 			nmp = TAILQ_NEXT(mp, mnt_list);
 			continue;
 		}
+#ifdef VPS
+		if (vps_canseemount(td->td_ucred, mp) != 0) {
+			nmp = TAILQ_NEXT(mp, mnt_list);
+			continue;
+		}
+#endif
 #ifdef MAC
 		if (mac_mount_check_stat(td->td_ucred, mp) != 0) {
 			nmp = TAILQ_NEXT(mp, mnt_list);
@@ -515,9 +552,18 @@ kern_getfsstat(struct thread *td, struct
 				vfs_unbusy(mp);
 				continue;
 			}
-			if (priv_check(td, PRIV_VFS_GENERATION)) {
+#ifdef VPS
+			if (td->td_ucred->cr_vps != vps0) {
 				bcopy(sp, &sb, sizeof(sb));
 				sb.f_fsid.val[0] = sb.f_fsid.val[1] = 0;
+				vps_statfs(td->td_ucred, mp, &sb);
+				sp = &sb;
+			}
+#endif
+			if (priv_check(td, PRIV_VFS_GENERATION)) {
+				if (sp != &sb)
+					bcopy(sp, &sb, sizeof(sb));
+				sb.f_fsid.val[0] = sb.f_fsid.val[1] = 0;
 				prison_enforce_statfs(td->td_ucred, mp, &sb);
 				sp = &sb;
 			}
@@ -4478,6 +4524,11 @@ kern_fhstatfs(struct thread *td, fhandle
 	error = prison_canseemount(td->td_ucred, mp);
 	if (error != 0)
 		goto out;
+#ifdef VPS
+	error = vps_canseemount(td->td_ucred, mp);
+	if (error != 0)
+		goto out;
+#endif
 #ifdef MAC
 	error = mac_mount_check_stat(td->td_ucred, mp);
 	if (error != 0)
