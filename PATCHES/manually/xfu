diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/net/route.c trunk-clean/sys/net/route.c
--- 10.0.0-stripped/sys/net/route.c	2014-01-15 14:20:21.000000000 +0100
+++ trunk-clean/sys/net/route.c	2014-01-15 14:31:33.000000000 +0100
@@ -68,6 +68,11 @@
 
 #include <vm/uma.h>
 
+#ifdef VPS
+void vnet_route_init(const void *);
+void vnet_route_uninit(const void *);
+#endif
+
 #define	RT_MAXFIBS	UINT16_MAX
 
 /* Kernel config default option. */
@@ -163,6 +168,8 @@ rt_tables_get_rnh_ptr(int table, int fam
 
 	/* rnh is [fib=0][af=0]. */
 	rnh = (struct radix_node_head **)V_rt_tables;
+	if (rnh == NULL)
+		return (NULL);
 	/* Get the offset to the requested table and fam. */
 	rnh += table * (AF_MAX+1) + fam;
 
@@ -200,7 +207,11 @@ route_init(void)
 }
 SYSINIT(route_init, SI_SUB_PROTO_DOMAIN, SI_ORDER_THIRD, route_init, 0);
 
+#ifdef VPS
+void
+#else
 static void
+#endif
 vnet_route_init(const void *unused __unused)
 {
 	struct domain *dom;
@@ -238,7 +249,35 @@ VNET_SYSINIT(vnet_route_init, SI_SUB_PRO
     vnet_route_init, 0);
 
 #ifdef VIMAGE
+#ifdef VPS
+__unused
+static int
+vnet_route_uninit_rtdel(struct radix_node *rn, void *arg)
+{
+	struct rtentry  *rt = (struct rtentry *)rn;
+	int             err;
+
+	/*
+	 * Protect (sorta) against walktree recursion problems
+	 * with cloned routes
+	 */
+	if ((rt->rt_flags & RTF_UP) == 0)
+		return (0);
+
+	err = rtrequest_fib(RTM_DELETE, rt_key(rt), rt->rt_gateway,
+			rt_mask(rt), rt->rt_flags|RTF_RNH_LOCKED,
+			(struct rtentry **) NULL, rt->rt_fibnum);
+	if (err) {
+		log(LOG_WARNING, "%s: error %d\n", __func__, err);
+	}
+
+	return (0);
+}
+
+void
+#else
 static void
+#endif
 vnet_route_uninit(const void *unused __unused)
 {
 	int table;
@@ -247,6 +286,31 @@ vnet_route_uninit(const void *unused __u
 	struct radix_node_head **rnh;
 
 	for (dom = domains; dom; dom = dom->dom_next) {
+#if 0
+// old ...
+		if (dom->dom_rtdetach) {
+			for (table = 0; table < rt_numfibs; table++) {
+				if ( (fam = dom->dom_family) == AF_INET ||
+				    table == 0) {
+					/* For now only AF_INET has > 1 tbl. */
+					rnh = rt_tables_get_rnh_ptr(table, fam);
+					if (rnh == NULL)
+						panic("%s: rnh NULL", __func__);
+
+					/* XXX doesn't improve anything */
+					RADIX_NODE_HEAD_LOCK(*rnh);
+					(void) (*rnh)->rnh_walktree(*rnh,
+						vnet_route_uninit_rtdel, NULL);
+					RADIX_NODE_HEAD_UNLOCK(*rnh);
+
+					dom->dom_rtdetach((void **)rnh,
+					    dom->dom_rtoffset);
+				} else {
+					break;
+				}
+			}
+		}
+#else
 		if (dom->dom_rtdetach == NULL)
 			continue;
 
@@ -261,10 +325,12 @@ vnet_route_uninit(const void *unused __u
 				panic("%s: rnh NULL", __func__);
 			dom->dom_rtdetach((void **)rnh, dom->dom_rtoffset);
 		}
+#endif
 	}
 
-	free(V_rt_tables, M_RTABLE);
 	uma_zdestroy(V_rtzone);
+	free(V_rt_tables, M_RTABLE);
+	V_rt_tables = NULL;
 }
 VNET_SYSUNINIT(vnet_route_uninit, SI_SUB_PROTO_DOMAIN, SI_ORDER_THIRD,
     vnet_route_uninit, 0);
