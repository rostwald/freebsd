diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/kern/kern_thread.c trunk-clean/sys/kern/kern_thread.c
--- 10.0.0-stripped/sys/kern/kern_thread.c	2014-01-15 14:20:23.000000000 +0100
+++ trunk-clean/sys/kern/kern_thread.c	2014-01-15 14:31:10.000000000 +0100
@@ -55,6 +55,8 @@ __FBSDID("$FreeBSD: release/10.0.0/sys/k
 #include <sys/pmckern.h>
 #endif
 
+#include <vps/vps_account.h>
+
 #include <security/audit/audit.h>
 
 #include <vm/vm.h>
@@ -279,7 +281,7 @@ threadinit(void)
 	thread_zone = uma_zcreate("THREAD", sched_sizeof_thread(),
 	    thread_ctor, thread_dtor, thread_init, thread_fini,
 	    16 - 1, 0);
-	tidhashtbl = hashinit(maxproc / 2, M_TIDHASH, &tidhash);
+	tidhashtbl = hashinit(V_maxproc / 2, M_TIDHASH, &tidhash);
 	rw_init(&tidhash_lock, "tidhash");
 }
 
@@ -372,6 +374,10 @@ void
 thread_free(struct thread *td)
 {
 
+	/* THREAD_CAN_MIGRATE() check for lock_profile_thread_exit() */
+	KASSERT(td->td_pinned == 0,
+		("%s: td=%p td->td_pinned=%d\n",
+		__func__, td, td->td_pinned));
 	lock_profile_thread_exit(td);
 	if (td->td_cpuset)
 		cpuset_rel(td->td_cpuset);
@@ -412,6 +418,10 @@ thread_exit(void)
 	    (long)p->p_pid, td->td_name);
 	KASSERT(TAILQ_EMPTY(&td->td_sigqueue.sq_list), ("signal pending"));
 
+#ifdef VPS
+	vps_account(p->p_ucred->cr_vps, VPS_ACC_THREADS, VPS_ACC_FREE, 1);
+#endif
+
 #ifdef AUDIT
 	AUDIT_SYSCALL_EXIT(0, td);
 #endif
@@ -1052,3 +1062,11 @@ tidhash_remove(struct thread *td)
 	LIST_REMOVE(td, td_hash);
 	rw_wunlock(&tidhash_lock);
 }
+
+void
+thread_zone_reclaim(void)
+{
+
+	uma_zone_reclaim(thread_zone);
+}
+
