diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/kern/kern_ktrace.c trunk-clean/sys/kern/kern_ktrace.c
--- 10.0.0-stripped/sys/kern/kern_ktrace.c	2014-01-15 14:20:25.000000000 +0100
+++ trunk-clean/sys/kern/kern_ktrace.c	2014-01-15 14:31:10.000000000 +0100
@@ -60,6 +60,8 @@ __FBSDID("$FreeBSD: release/10.0.0/sys/k
 #include <sys/syslog.h>
 #include <sys/sysproto.h>
 
+#include <vps/vps.h>
+
 #include <security/mac/mac_framework.h>
 
 /*
@@ -155,7 +157,11 @@ static void ktr_freerequest_locked(struc
 static void ktr_writerequest(struct thread *td, struct ktr_request *req);
 static int ktrcanset(struct thread *,struct proc *);
 static int ktrsetchildren(struct thread *,struct proc *,int,int,struct vnode *);
+#ifdef VPS
+int ktrops(struct thread *,struct proc *,int,int,struct vnode *);
+#else
 static int ktrops(struct thread *,struct proc *,int,int,struct vnode *);
+#endif
 static void ktrprocctor_entered(struct thread *, struct proc *);
 
 /*
@@ -903,7 +909,7 @@ sys_ktrace(td, uap)
 		int vrele_count;
 
 		vrele_count = 0;
-		sx_slock(&allproc_lock);
+		sx_slock(&V_allproc_lock);
 		FOREACH_PROC_IN_SYSTEM(p) {
 			PROC_LOCK(p);
 			if (p->p_tracevp == vp) {
@@ -918,7 +924,7 @@ sys_ktrace(td, uap)
 			}
 			PROC_UNLOCK(p);
 		}
-		sx_sunlock(&allproc_lock);
+		sx_sunlock(&V_allproc_lock);
 		if (vrele_count > 0) {
 			while (vrele_count-- > 0)
 				vrele(vp);
@@ -928,14 +934,14 @@ sys_ktrace(td, uap)
 	/*
 	 * do it
 	 */
-	sx_slock(&proctree_lock);
+	sx_slock(&V_proctree_lock);
 	if (uap->pid < 0) {
 		/*
 		 * by process group
 		 */
 		pg = pgfind(-uap->pid);
 		if (pg == NULL) {
-			sx_sunlock(&proctree_lock);
+			sx_sunlock(&V_proctree_lock);
 			error = ESRCH;
 			goto done;
 		}
@@ -959,7 +965,7 @@ sys_ktrace(td, uap)
 				ret |= ktrops(td, p, ops, facs, vp);
 		}
 		if (nfound == 0) {
-			sx_sunlock(&proctree_lock);
+			sx_sunlock(&V_proctree_lock);
 			error = ESRCH;
 			goto done;
 		}
@@ -975,7 +981,7 @@ sys_ktrace(td, uap)
 		if (error) {
 			if (p != NULL)
 				PROC_UNLOCK(p);
-			sx_sunlock(&proctree_lock);
+			sx_sunlock(&V_proctree_lock);
 			goto done;
 		}
 		if (descend)
@@ -983,7 +989,7 @@ sys_ktrace(td, uap)
 		else
 			ret |= ktrops(td, p, ops, facs, vp);
 	}
-	sx_sunlock(&proctree_lock);
+	sx_sunlock(&V_proctree_lock);
 	if (!ret)
 		error = EPERM;
 done:
@@ -1033,7 +1039,11 @@ sys_utrace(td, uap)
 }
 
 #ifdef KTRACE
+#ifdef VPS
+int
+#else
 static int
+#endif
 ktrops(td, p, ops, facs, vp)
 	struct thread *td;
 	struct proc *p;
@@ -1100,7 +1110,7 @@ ktrsetchildren(td, top, ops, facs, vp)
 
 	p = top;
 	PROC_LOCK_ASSERT(p, MA_OWNED);
-	sx_assert(&proctree_lock, SX_LOCKED);
+	sx_assert(&V_proctree_lock, SX_LOCKED);
 	for (;;) {
 		ret |= ktrops(td, p, ops, facs, vp);
 		/*
@@ -1228,7 +1238,7 @@ ktr_writerequest(struct thread *td, stru
 	 * credentials for the operation.
 	 */
 	cred = NULL;
-	sx_slock(&allproc_lock);
+	sx_slock(&V_allproc_lock);
 	FOREACH_PROC_IN_SYSTEM(p) {
 		PROC_LOCK(p);
 		if (p->p_tracevp == vp) {
@@ -1243,7 +1253,7 @@ ktr_writerequest(struct thread *td, stru
 			cred = NULL;
 		}
 	}
-	sx_sunlock(&allproc_lock);
+	sx_sunlock(&V_allproc_lock);
 
 	while (vrele_count-- > 0)
 		vrele(vp);
