diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/vm/vm_fault.c trunk-clean/sys/vm/vm_fault.c
--- 10.0.0-stripped/sys/vm/vm_fault.c	2014-01-15 14:19:22.000000000 +0100
+++ trunk-clean/sys/vm/vm_fault.c	2014-01-15 14:31:32.000000000 +0100
@@ -102,6 +102,10 @@ __FBSDID("$FreeBSD: release/10.0.0/sys/v
 #include <vm/vm_pager.h>
 #include <vm/vm_extern.h>
 
+#include <vps/vps.h>
+#include <vps/vps2.h>
+#include <vps/vps_account.h>
+
 #define PFBAK 4
 #define PFFOR 4
 #define PAGEORDER_SIZE (PFBAK+PFFOR)
@@ -416,6 +420,38 @@ RetryFault:;
 			 * restart and new reading of the p_flag.
 			 */
 			fs.m = NULL;
+#ifdef VPS
+			if (vps0 == NULL) {
+				/* 
+				 * During very very early system startup we don't
+				 * have vps0.
+				 */
+				;
+			} else {
+				struct vps *vps;
+
+				vps = curthread->td_vps;
+				if (vps->vps_acc->phys.soft != 0 && vps->vps_acc->phys.hard != 0 &&
+				    vps->vps_acc->phys.cur + PAGE_SIZE > vps->vps_acc->phys.hard) {
+					/*
+					printf("%s: vps=%p --> vps_account_waitpfault()\n",
+						__func__, vps);
+					unlock_and_deallocate(&fs);
+					vps_account_waitpfault(vps);
+					goto RetryFault;
+					*/
+					printf("%s: vps=%p --> LIMIT, td=%p\n",
+						__func__, vps, curthread);
+					unlock_and_deallocate(&fs);
+					if (vps_account_waitpfault(vps))
+						/* curproc has been killed */
+						return (KERN_FAILURE);
+					else
+						/* memory is available again */
+						goto RetryFault;
+				}
+			}
+#endif
 			if (!vm_page_count_severe() || P_KILLED(curproc)) {
 #if VM_NRESERVLEVEL > 0
 				if ((fs.object->flags & OBJ_COLORED) == 0) {
