diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/kern/sysv_msg.c trunk-clean/sys/kern/sysv_msg.c
--- 10.0.0-stripped/sys/kern/sysv_msg.c	2014-01-15 14:20:23.000000000 +0100
+++ trunk-clean/sys/kern/sysv_msg.c	2014-01-15 14:31:10.000000000 +0100
@@ -46,6 +46,19 @@
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  * SUCH DAMAGE.
  */
+/*-
+ * VPS adaption:
+ *
+ * Copyright (c) 2009-2013 Klaus P. Ohrhallinger <k@7he.at>
+ * All rights reserved.
+ *
+ * Development of this software was partly funded by:
+ *    TransIP.nl <http://www.transip.nl/>
+ *
+ * <BSD license>
+ *
+ * $Id: sysv_msg.c 212 2014-01-15 10:13:16Z klaus $
+ */
 
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: release/10.0.0/sys/kern/sysv_msg.c 225617 2011-09-16 13:58:51Z kmacy $");
@@ -62,14 +75,21 @@ __FBSDID("$FreeBSD: release/10.0.0/sys/k
 #include <sys/lock.h>
 #include <sys/mutex.h>
 #include <sys/module.h>
+#include <sys/sysctl.h>
 #include <sys/msg.h>
 #include <sys/racct.h>
 #include <sys/syscall.h>
 #include <sys/syscallsubr.h>
 #include <sys/sysent.h>
-#include <sys/sysctl.h>
 #include <sys/malloc.h>
 #include <sys/jail.h>
+#include <sys/eventhandler.h>
+
+#include <vps/vps.h>
+#include <vps/vps2.h>
+#include <vps/vps_int.h>
+#include <vps/vps_libdump.h>
+#include <vps/vps_snapst.h>
 
 #include <security/mac/mac_framework.h>
 
@@ -78,6 +98,7 @@ FEATURE(sysv_msg, "System V message queu
 static MALLOC_DEFINE(M_MSG, "msg", "SVID compatible message queues");
 
 static int msginit(void);
+static int msginit2(void);
 static int msgunload(void);
 static int sysvmsg_modload(struct module *, int, void *);
 
@@ -117,6 +138,7 @@ static void msg_freehdr(struct msg *msgh
  * Consequently, msginit in kern/sysv_msg.c checks that msgssz is a power of
  * two between 8 and 1024 inclusive (and panic's if it isn't).
  */
+#if 0
 struct msginfo msginfo = {
                 MSGMAX,         /* max chars in a message */
                 MSGMNI,         /* # of message queue identifiers */
@@ -126,6 +148,7 @@ struct msginfo msginfo = {
                 		/* (must be small power of 2 greater than 4) */
                 MSGSEG          /* number of message segments */
 };
+#endif
 
 /*
  * macros to convert between msqid_ds's and msqid's.
@@ -147,6 +170,7 @@ struct msgmap {
 
 #define MSG_LOCKED	01000	/* Is this msqid_ds locked? */
 
+#if 0
 static int nfree_msgmaps;	/* # of free map entries */
 static short free_msgmaps;	/* head of linked list of free map entries */
 static struct msg *free_msghdrs;/* list of free msg headers */
@@ -155,6 +179,27 @@ static struct msgmap *msgmaps;	/* MSGSEG
 static struct msg *msghdrs;	/* MSGTQL msg headers */
 static struct msqid_kernel *msqids;	/* MSGMNI msqid_kernel struct's */
 static struct mtx msq_mtx;	/* global mutex for message queues. */
+#endif
+
+VPS_DEFINE(int, nfree_msgmaps);
+VPS_DEFINE(short, free_msgmaps);
+VPS_DEFINE(struct msg *, free_msghdrs);
+VPS_DEFINE(char *, msgpool);
+VPS_DEFINE(struct msgmap *, msgmaps);
+VPS_DEFINE(struct msg *, msghdrs);
+VPS_DEFINE(struct msqid_kernel *, msqids);
+VPS_DEFINE(struct mtx, msq_mtx);
+VPS_DEFINE(struct msginfo, msginfo);
+
+#define V_nfree_msgmaps	VPSV(nfree_msgmaps)
+#define V_free_msgmaps	VPSV(free_msgmaps)
+#define V_free_msghdrs	VPSV(free_msghdrs)
+#define V_msgpool	VPSV(msgpool)
+#define V_msgmaps	VPSV(msgmaps)
+#define V_msghdrs	VPSV(msghdrs)
+#define	V_msqids	VPSV(msqids)
+#define V_msq_mtx	VPSV(msq_mtx)
+#define V_msginfo	VPSV(msginfo)
 
 static struct syscall_helper_data msg_syscalls[] = {
 	SYSCALL_INIT_HELPER(msgctl),
@@ -189,25 +234,153 @@ static struct syscall_helper_data msg32_
 #endif
 	SYSCALL_INIT_LAST
 };
+#endif /* COMPAT_FREEBSD32 */
+
+#ifdef VPS
+static u_int nmsgmaps_global;
+static eventhandler_tag msg_vpsalloc_tag;
+static eventhandler_tag msg_vpsfree_tag;
+
+int msg_snapshot_vps(struct vps_snapst_ctx *ctx, struct vps *vps);
+int msg_snapshot_proc(struct vps_snapst_ctx *ctx, struct vps *vps, struct proc* proc);
+int msg_restore_vps(struct vps_snapst_ctx *ctx, struct vps *vps);
+int msg_restore_proc(struct vps_snapst_ctx *ctx, struct vps *vps, struct proc* proc);
+int msg_restore_fixup(struct vps_snapst_ctx *ctx, struct vps *vps);
+
+static void
+msg_vpsalloc_hook(void *arg, struct vps *vps)
+{
+
+	DPRINTF(("%s: vps=%p\n", __func__, vps));
+
+	vps_ref(vps, NULL);
+
+	msginit();
+}
+
+static void
+msg_vpsfree_hook(void *arg, struct vps *vps)
+{
+
+	DPRINTF(("%s: vps=%p\n", __func__, vps));
+
+	if (msgunload())
+		printf("%s: msgunload() error\n", __func__);
+
+	vps_deref(vps, NULL);
+}
+
+static int
+msginit_global(void)
+{
+	struct vps *vps, *save_vps;
+	int error;
+
+	save_vps = curthread->td_vps;
+
+	nmsgmaps_global = 0;
+
+	sx_slock(&vps_all_lock);
+	LIST_FOREACH(vps, &vps_head, vps_all) {
+		curthread->td_vps = vps;
+		msg_vpsalloc_hook(NULL, vps);
+		curthread->td_vps = save_vps;
+	}
+	sx_sunlock(&vps_all_lock);
+
+	msg_vpsalloc_tag = EVENTHANDLER_REGISTER(vps_alloc, msg_vpsalloc_hook, NULL,
+		EVENTHANDLER_PRI_ANY);
+	msg_vpsfree_tag = EVENTHANDLER_REGISTER(vps_free, msg_vpsfree_hook, NULL,
+		EVENTHANDLER_PRI_ANY);
+
+	vps_func->msg_snapshot_vps = msg_snapshot_vps;
+	vps_func->msg_snapshot_proc = msg_snapshot_proc;
+	vps_func->msg_restore_vps = msg_restore_vps;
+	vps_func->msg_restore_proc = msg_restore_proc;
+	vps_func->msg_restore_fixup = msg_restore_fixup;
+
+	error = syscall_helper_register(msg_syscalls);
+	if (error != 0)
+		return (error);
+	#ifdef COMPAT_FREEBSD32
+	error = syscall32_helper_register(msg32_syscalls);
+	if (error != 0)
+		return (error);
+	#endif
+	return (error);
+}
+
+static int
+msgunload_global(void)
+{
+	struct vps *vps, *save_vps;
+
+	save_vps = curthread->td_vps;
+
+	if (nmsgmaps_global > 0)
+		return (EBUSY);
+
+	syscall_helper_unregister(msg_syscalls);
+#ifdef COMPAT_FREEBSD32
+	syscall32_helper_unregister(msg32_syscalls);
 #endif
 
+	vps_func->msg_snapshot_vps = NULL;
+	vps_func->msg_snapshot_proc = NULL;
+	vps_func->msg_restore_vps = NULL;
+	vps_func->msg_restore_proc = NULL;
+	vps_func->msg_restore_fixup = NULL;
+
+	EVENTHANDLER_DEREGISTER(vps_alloc, msg_vpsalloc_tag);
+	EVENTHANDLER_DEREGISTER(vps_free, msg_vpsfree_tag);
+
+	sx_slock(&vps_all_lock);
+	LIST_FOREACH(vps, &vps_head, vps_all) {
+		curthread->td_vps = vps;
+		if (VPS_VPS(vps, msgpool))
+			msg_vpsfree_hook(NULL, vps);
+		curthread->td_vps = save_vps;
+	}
+	sx_sunlock(&vps_all_lock);
+
+	return (0);
+}
+#endif /* VPS */
+
 static int
 msginit()
 {
-	int i, error;
 
-	TUNABLE_INT_FETCH("kern.ipc.msgseg", &msginfo.msgseg);
-	TUNABLE_INT_FETCH("kern.ipc.msgssz", &msginfo.msgssz);
-	msginfo.msgmax = msginfo.msgseg * msginfo.msgssz;
-	TUNABLE_INT_FETCH("kern.ipc.msgmni", &msginfo.msgmni);
-	TUNABLE_INT_FETCH("kern.ipc.msgmnb", &msginfo.msgmnb);
-	TUNABLE_INT_FETCH("kern.ipc.msgtql", &msginfo.msgtql);
-
-	msgpool = malloc(msginfo.msgmax, M_MSG, M_WAITOK);
-	msgmaps = malloc(sizeof(struct msgmap) * msginfo.msgseg, M_MSG, M_WAITOK);
-	msghdrs = malloc(sizeof(struct msg) * msginfo.msgtql, M_MSG, M_WAITOK);
-	msqids = malloc(sizeof(struct msqid_kernel) * msginfo.msgmni, M_MSG,
-	    M_WAITOK);
+	V_msginfo.msgmax = MSGMAX;
+	V_msginfo.msgmni = MSGMNI;
+	V_msginfo.msgmnb = MSGMNB;
+	V_msginfo.msgtql = MSGTQL;
+	V_msginfo.msgssz = MSGSSZ;
+	V_msginfo.msgseg = MSGSEG;
+
+	TUNABLE_INT_FETCH("kern.ipc.msgseg", &V_msginfo.msgseg);
+	TUNABLE_INT_FETCH("kern.ipc.msgssz", &V_msginfo.msgssz);
+	V_msginfo.msgmax = V_msginfo.msgseg * V_msginfo.msgssz;
+	TUNABLE_INT_FETCH("kern.ipc.msgmni", &V_msginfo.msgmni);
+	TUNABLE_INT_FETCH("kern.ipc.msgmnb", &V_msginfo.msgmnb);
+	TUNABLE_INT_FETCH("kern.ipc.msgtql", &V_msginfo.msgtql);
+
+	return (msginit2());
+}
+
+static int
+msginit2()
+{
+	int i;
+#ifndef VPS
+	int error;
+#endif
+
+	V_msgpool = malloc(V_msginfo.msgmax, M_MSG, M_WAITOK);
+	V_msgmaps = malloc(sizeof(struct msgmap) * V_msginfo.msgseg, M_MSG, M_WAITOK);
+	V_msghdrs = malloc(sizeof(struct msg) * V_msginfo.msgtql, M_MSG, M_WAITOK);
+	V_msqids = malloc(sizeof(struct msqid_kernel) * V_msginfo.msgmni, M_MSG,
+		M_WAITOK);
 
 	/*
 	 * msginfo.msgssz should be a power of two for efficiency reasons.
@@ -216,48 +389,50 @@ msginit()
 	 */
 
 	i = 8;
-	while (i < 1024 && i != msginfo.msgssz)
+	while (i < 1024 && i != V_msginfo.msgssz)
 		i <<= 1;
-    	if (i != msginfo.msgssz) {
-		DPRINTF(("msginfo.msgssz=%d (0x%x)\n", msginfo.msgssz,
-		    msginfo.msgssz));
+    	if (i != V_msginfo.msgssz) {
+		DPRINTF(("msginfo.msgssz=%d (0x%x)\n", V_msginfo.msgssz,
+		    V_msginfo.msgssz));
 		panic("msginfo.msgssz not a small power of 2");
 	}
 
-	if (msginfo.msgseg > 32767) {
-		DPRINTF(("msginfo.msgseg=%d\n", msginfo.msgseg));
+	if (V_msginfo.msgseg > 32767) {
+		DPRINTF(("msginfo.msgseg=%d\n", V_msginfo.msgseg));
 		panic("msginfo.msgseg > 32767");
 	}
 
-	for (i = 0; i < msginfo.msgseg; i++) {
+	for (i = 0; i < V_msginfo.msgseg; i++) {
 		if (i > 0)
-			msgmaps[i-1].next = i;
-		msgmaps[i].next = -1;	/* implies entry is available */
+			V_msgmaps[i-1].next = i;
+		V_msgmaps[i].next = -1;	/* implies entry is available */
 	}
-	free_msgmaps = 0;
-	nfree_msgmaps = msginfo.msgseg;
+	V_free_msgmaps = 0;
+	V_nfree_msgmaps = V_msginfo.msgseg;
 
-	for (i = 0; i < msginfo.msgtql; i++) {
-		msghdrs[i].msg_type = 0;
+	for (i = 0; i < V_msginfo.msgtql; i++) {
+		V_msghdrs[i].msg_type = 0;
 		if (i > 0)
-			msghdrs[i-1].msg_next = &msghdrs[i];
-		msghdrs[i].msg_next = NULL;
+			V_msghdrs[i-1].msg_next = &V_msghdrs[i];
+		V_msghdrs[i].msg_next = NULL;
 #ifdef MAC
-		mac_sysvmsg_init(&msghdrs[i]);
+		mac_sysvmsg_init(&V_msghdrs[i]);
 #endif
     	}
-	free_msghdrs = &msghdrs[0];
+	V_free_msghdrs = &V_msghdrs[0];
 
-	for (i = 0; i < msginfo.msgmni; i++) {
-		msqids[i].u.msg_qbytes = 0;	/* implies entry is available */
-		msqids[i].u.msg_perm.seq = 0;	/* reset to a known value */
-		msqids[i].u.msg_perm.mode = 0;
+	for (i = 0; i < V_msginfo.msgmni; i++) {
+		V_msqids[i].u.msg_qbytes = 0;	/* implies entry is available */
+		V_msqids[i].u.msg_perm.seq = 0;	/* reset to a known value */
+		V_msqids[i].u.msg_perm.mode = 0;
+		V_msqids[i].cred = NULL;
 #ifdef MAC
-		mac_sysvmsq_init(&msqids[i]);
+		mac_sysvmsq_init(&V_msqids[i]);
 #endif
 	}
-	mtx_init(&msq_mtx, "msq", NULL, MTX_DEF);
+	mtx_init(&V_msq_mtx, "msq", NULL, MTX_DEF);
 
+#ifndef VPS
 	error = syscall_helper_register(msg_syscalls);
 	if (error != 0)
 		return (error);
@@ -266,6 +441,7 @@ msginit()
 	if (error != 0)
 		return (error);
 #endif
+#endif /* VPS */
 	return (0);
 }
 
@@ -278,37 +454,47 @@ msgunload()
 	int i;
 #endif
 
+#ifndef VPS
 	syscall_helper_unregister(msg_syscalls);
 #ifdef COMPAT_FREEBSD32
 	syscall32_helper_unregister(msg32_syscalls);
 #endif
+#endif /* VPS */
 
-	for (msqid = 0; msqid < msginfo.msgmni; msqid++) {
+	for (msqid = 0; msqid < V_msginfo.msgmni; msqid++) {
 		/*
 		 * Look for an unallocated and unlocked msqid_ds.
 		 * msqid_ds's can be locked by msgsnd or msgrcv while
 		 * they are copying the message in/out.  We can't
 		 * re-use the entry until they release it.
 		 */
-		msqkptr = &msqids[msqid];
+		msqkptr = &V_msqids[msqid];
 		if (msqkptr->u.msg_qbytes != 0 ||
 		    (msqkptr->u.msg_perm.mode & MSG_LOCKED) != 0)
 			break;
 	}
-	if (msqid != msginfo.msgmni)
+
+	for (msqid = 0; msqid < V_msginfo.msgmni; msqid++) {
+		if (V_msqids[msqid].cred != NULL)
+			crfree(V_msqids[msqid].cred);
+	}
+#ifndef VPS
+	/* For VPS, just kill everything silently. */
+	if (msqid != V_msginfo.msgmni)
 		return (EBUSY);
+#endif
 
 #ifdef MAC
-	for (i = 0; i < msginfo.msgtql; i++)
-		mac_sysvmsg_destroy(&msghdrs[i]);
-	for (msqid = 0; msqid < msginfo.msgmni; msqid++)
-		mac_sysvmsq_destroy(&msqids[msqid]);
-#endif
-	free(msgpool, M_MSG);
-	free(msgmaps, M_MSG);
-	free(msghdrs, M_MSG);
-	free(msqids, M_MSG);
-	mtx_destroy(&msq_mtx);
+	for (i = 0; i < V_msginfo.msgtql; i++)
+		mac_sysvmsg_destroy(&V_msghdrs[i]);
+	for (msqid = 0; msqid < V_msginfo.msgmni; msqid++)
+		mac_sysvmsq_destroy(&V_msqids[msqid]);
+#endif
+	free(V_msgpool, M_MSG);
+	free(V_msgmaps, M_MSG);
+	free(V_msghdrs, M_MSG);
+	free(V_msqids, M_MSG);
+	mtx_destroy(&V_msq_mtx);
 	return (0);
 }
 
@@ -320,12 +506,22 @@ sysvmsg_modload(struct module *module, i
 
 	switch (cmd) {
 	case MOD_LOAD:
+#ifdef VPS
+		error = msginit_global();
+		if (error != 0)
+			msgunload_global();
+#else
 		error = msginit();
 		if (error != 0)
 			msgunload();
+#endif
 		break;
 	case MOD_UNLOAD:
+#ifdef VPS
+		error = msgunload_global();
+#else
 		error = msgunload();
+#endif
 		break;
 	case MOD_SHUTDOWN:
 		break;
@@ -351,22 +547,25 @@ msg_freehdr(msghdr)
 {
 	while (msghdr->msg_ts > 0) {
 		short next;
-		if (msghdr->msg_spot < 0 || msghdr->msg_spot >= msginfo.msgseg)
+		if (msghdr->msg_spot < 0 || msghdr->msg_spot >= V_msginfo.msgseg)
 			panic("msghdr->msg_spot out of range");
-		next = msgmaps[msghdr->msg_spot].next;
-		msgmaps[msghdr->msg_spot].next = free_msgmaps;
-		free_msgmaps = msghdr->msg_spot;
-		nfree_msgmaps++;
+		next = V_msgmaps[msghdr->msg_spot].next;
+		V_msgmaps[msghdr->msg_spot].next = V_free_msgmaps;
+		V_free_msgmaps = msghdr->msg_spot;
+		V_nfree_msgmaps++;
+#ifdef VPS
+		atomic_subtract_int(&nmsgmaps_global, 1);
+#endif
 		msghdr->msg_spot = next;
-		if (msghdr->msg_ts >= msginfo.msgssz)
-			msghdr->msg_ts -= msginfo.msgssz;
+		if (msghdr->msg_ts >= V_msginfo.msgssz)
+			msghdr->msg_ts -= V_msginfo.msgssz;
 		else
 			msghdr->msg_ts = 0;
 	}
 	if (msghdr->msg_spot != -1)
 		panic("msghdr->msg_spot != -1");
-	msghdr->msg_next = free_msghdrs;
-	free_msghdrs = msghdr;
+	msghdr->msg_next = V_free_msghdrs;
+	V_free_msghdrs = msghdr;
 #ifdef MAC
 	mac_sysvmsg_cleanup(msghdr);
 #endif
@@ -414,15 +613,15 @@ kern_msgctl(td, msqid, cmd, msqbuf)
 
 	msqix = IPCID_TO_IX(msqid);
 
-	if (msqix < 0 || msqix >= msginfo.msgmni) {
+	if (msqix < 0 || msqix >= V_msginfo.msgmni) {
 		DPRINTF(("msqid (%d) out of range (0<=msqid<%d)\n", msqix,
-		    msginfo.msgmni));
+		    V_msginfo.msgmni));
 		return (EINVAL);
 	}
 
-	msqkptr = &msqids[msqix];
+	msqkptr = &V_msqids[msqix];
 
-	mtx_lock(&msq_mtx);
+	mtx_lock(&V_msq_mtx);
 	if (msqkptr->u.msg_qbytes == 0) {
 		DPRINTF(("no such msqid\n"));
 		error = EINVAL;
@@ -511,10 +710,10 @@ kern_msgctl(td, msqid, cmd, msqbuf)
 			if (error)
 				goto done2;
 		}
-		if (msqbuf->msg_qbytes > msginfo.msgmnb) {
+		if (msqbuf->msg_qbytes > V_msginfo.msgmnb) {
 			DPRINTF(("can't increase msg_qbytes beyond %d"
-			    "(truncating)\n", msginfo.msgmnb));
-			msqbuf->msg_qbytes = msginfo.msgmnb;	/* silently restrict qbytes to system limit */
+			    "(truncating)\n", V_msginfo.msgmnb));
+			msqbuf->msg_qbytes = V_msginfo.msgmnb;	/* silently restrict qbytes to system limit */
 		}
 		if (msqbuf->msg_qbytes == 0) {
 			DPRINTF(("can't reduce msg_qbytes to 0\n"));
@@ -546,7 +745,7 @@ kern_msgctl(td, msqid, cmd, msqbuf)
 	if (error == 0)
 		td->td_retval[0] = rval;
 done2:
-	mtx_unlock(&msq_mtx);
+	mtx_unlock(&V_msq_mtx);
 	return (error);
 }
 
@@ -573,15 +772,15 @@ sys_msgget(td, uap)
 	if (!prison_allow(td->td_ucred, PR_ALLOW_SYSVIPC))
 		return (ENOSYS);
 
-	mtx_lock(&msq_mtx);
+	mtx_lock(&V_msq_mtx);
 	if (key != IPC_PRIVATE) {
-		for (msqid = 0; msqid < msginfo.msgmni; msqid++) {
-			msqkptr = &msqids[msqid];
+		for (msqid = 0; msqid < V_msginfo.msgmni; msqid++) {
+			msqkptr = &V_msqids[msqid];
 			if (msqkptr->u.msg_qbytes != 0 &&
 			    msqkptr->u.msg_perm.key == key)
 				break;
 		}
-		if (msqid < msginfo.msgmni) {
+		if (msqid < V_msginfo.msgmni) {
 			DPRINTF(("found public key\n"));
 			if ((msgflg & IPC_CREAT) && (msgflg & IPC_EXCL)) {
 				DPRINTF(("not exclusive\n"));
@@ -605,19 +804,19 @@ sys_msgget(td, uap)
 
 	DPRINTF(("need to allocate the msqid_ds\n"));
 	if (key == IPC_PRIVATE || (msgflg & IPC_CREAT)) {
-		for (msqid = 0; msqid < msginfo.msgmni; msqid++) {
+		for (msqid = 0; msqid < V_msginfo.msgmni; msqid++) {
 			/*
 			 * Look for an unallocated and unlocked msqid_ds.
 			 * msqid_ds's can be locked by msgsnd or msgrcv while
 			 * they are copying the message in/out.  We can't
 			 * re-use the entry until they release it.
 			 */
-			msqkptr = &msqids[msqid];
+			msqkptr = &V_msqids[msqid];
 			if (msqkptr->u.msg_qbytes == 0 &&
 			    (msqkptr->u.msg_perm.mode & MSG_LOCKED) == 0)
 				break;
 		}
-		if (msqid == msginfo.msgmni) {
+		if (msqid == V_msginfo.msgmni) {
 			DPRINTF(("no more msqid_ds's available\n"));
 			error = ENOSPC;
 			goto done2;
@@ -645,7 +844,7 @@ sys_msgget(td, uap)
 		msqkptr->u.msg_last = NULL;
 		msqkptr->u.msg_cbytes = 0;
 		msqkptr->u.msg_qnum = 0;
-		msqkptr->u.msg_qbytes = msginfo.msgmnb;
+		msqkptr->u.msg_qbytes = V_msginfo.msgmnb;
 		msqkptr->u.msg_lspid = 0;
 		msqkptr->u.msg_lrpid = 0;
 		msqkptr->u.msg_stime = 0;
@@ -664,7 +863,7 @@ found:
 	/* Construct the unique msqid */
 	td->td_retval[0] = IXSEQ_TO_IPCID(msqid, msqkptr->u.msg_perm);
 done2:
-	mtx_unlock(&msq_mtx);
+	mtx_unlock(&V_msq_mtx);
 	return (error);
 }
 
@@ -696,17 +895,17 @@ kern_msgsnd(td, msqid, msgp, msgsz, msgf
 	if (!prison_allow(td->td_ucred, PR_ALLOW_SYSVIPC))
 		return (ENOSYS);
 
-	mtx_lock(&msq_mtx);
+	mtx_lock(&V_msq_mtx);
 	msqix = IPCID_TO_IX(msqid);
 
-	if (msqix < 0 || msqix >= msginfo.msgmni) {
+	if (msqix < 0 || msqix >= V_msginfo.msgmni) {
 		DPRINTF(("msqid (%d) out of range (0<=msqid<%d)\n", msqix,
-		    msginfo.msgmni));
+		    V_msginfo.msgmni));
 		error = EINVAL;
 		goto done2;
 	}
 
-	msqkptr = &msqids[msqix];
+	msqkptr = &V_msqids[msqix];
 	if (msqkptr->u.msg_qbytes == 0) {
 		DPRINTF(("no such message queue id\n"));
 		error = EINVAL;
@@ -746,9 +945,9 @@ kern_msgsnd(td, msqid, msgp, msgsz, msgf
 	PROC_UNLOCK(td->td_proc);
 #endif
 
-	segs_needed = (msgsz + msginfo.msgssz - 1) / msginfo.msgssz;
+	segs_needed = (msgsz + V_msginfo.msgssz - 1) / V_msginfo.msgssz;
 	DPRINTF(("msgsz=%zu, msgssz=%d, segs_needed=%d\n", msgsz,
-	    msginfo.msgssz, segs_needed));
+	    V_msginfo.msgssz, segs_needed));
 	for (;;) {
 		int need_more_resources = 0;
 
@@ -771,11 +970,11 @@ kern_msgsnd(td, msqid, msgp, msgsz, msgf
 			DPRINTF(("msgsz + msg_cbytes > msg_qbytes\n"));
 			need_more_resources = 1;
 		}
-		if (segs_needed > nfree_msgmaps) {
+		if (segs_needed > V_nfree_msgmaps) {
 			DPRINTF(("segs_needed > nfree_msgmaps\n"));
 			need_more_resources = 1;
 		}
-		if (free_msghdrs == NULL) {
+		if (V_free_msghdrs == NULL) {
 			DPRINTF(("no more msghdrs\n"));
 			need_more_resources = 1;
 		}
@@ -801,7 +1000,7 @@ kern_msgsnd(td, msqid, msgp, msgsz, msgf
 				we_own_it = 1;
 			}
 			DPRINTF(("msgsnd:  goodnight\n"));
-			error = msleep(msqkptr, &msq_mtx, (PZERO - 4) | PCATCH,
+			error = msleep(msqkptr, &V_msq_mtx, (PZERO - 4) | PCATCH,
 			    "msgsnd", hz);
 			DPRINTF(("msgsnd:  good morning, error=%d\n", error));
 			if (we_own_it)
@@ -839,11 +1038,11 @@ kern_msgsnd(td, msqid, msgp, msgsz, msgf
 
 	if (msqkptr->u.msg_perm.mode & MSG_LOCKED)
 		panic("msg_perm.mode & MSG_LOCKED");
-	if (segs_needed > nfree_msgmaps)
+	if (segs_needed > V_nfree_msgmaps)
 		panic("segs_needed > nfree_msgmaps");
 	if (msgsz + msqkptr->u.msg_cbytes > msqkptr->u.msg_qbytes)
 		panic("msgsz + msg_cbytes > msg_qbytes");
-	if (free_msghdrs == NULL)
+	if (V_free_msghdrs == NULL)
 		panic("no more msghdrs");
 
 	/*
@@ -859,8 +1058,8 @@ kern_msgsnd(td, msqid, msgp, msgsz, msgf
 	 * Allocate a message header
 	 */
 
-	msghdr = free_msghdrs;
-	free_msghdrs = msghdr->msg_next;
+	msghdr = V_free_msghdrs;
+	V_free_msghdrs = msghdr->msg_next;
 	msghdr->msg_spot = -1;
 	msghdr->msg_ts = msgsz;
 	msghdr->msg_type = mtype;
@@ -878,19 +1077,22 @@ kern_msgsnd(td, msqid, msgp, msgsz, msgf
 	 */
 
 	while (segs_needed > 0) {
-		if (nfree_msgmaps <= 0)
+		if (V_nfree_msgmaps <= 0)
 			panic("not enough msgmaps");
-		if (free_msgmaps == -1)
+		if (V_free_msgmaps == -1)
 			panic("nil free_msgmaps");
-		next = free_msgmaps;
+		next = V_free_msgmaps;
 		if (next <= -1)
 			panic("next too low #1");
-		if (next >= msginfo.msgseg)
+		if (next >= V_msginfo.msgseg)
 			panic("next out of range #1");
 		DPRINTF(("allocating segment %d to message\n", next));
-		free_msgmaps = msgmaps[next].next;
-		nfree_msgmaps--;
-		msgmaps[next].next = msghdr->msg_spot;
+		V_free_msgmaps = V_msgmaps[next].next;
+		V_nfree_msgmaps--;
+#ifdef VPS
+		atomic_add_int(&nmsgmaps_global, 1);
+#endif 
+		V_msgmaps[next].next = msghdr->msg_spot;
 		msghdr->msg_spot = next;
 		segs_needed--;
 	}
@@ -915,18 +1117,18 @@ kern_msgsnd(td, msqid, msgp, msgsz, msgf
 	next = msghdr->msg_spot;
 	while (msgsz > 0) {
 		size_t tlen;
-		if (msgsz > msginfo.msgssz)
-			tlen = msginfo.msgssz;
+		if (msgsz > V_msginfo.msgssz)
+			tlen = V_msginfo.msgssz;
 		else
 			tlen = msgsz;
 		if (next <= -1)
 			panic("next too low #2");
-		if (next >= msginfo.msgseg)
+		if (next >= V_msginfo.msgseg)
 			panic("next out of range #2");
-		mtx_unlock(&msq_mtx);
-		if ((error = copyin(msgp, &msgpool[next * msginfo.msgssz],
+		mtx_unlock(&V_msq_mtx);
+		if ((error = copyin(msgp, &V_msgpool[next * V_msginfo.msgssz],
 		    tlen)) != 0) {
-			mtx_lock(&msq_mtx);
+			mtx_lock(&V_msq_mtx);
 			DPRINTF(("error %d copying in message segment\n",
 			    error));
 			msg_freehdr(msghdr);
@@ -934,10 +1136,10 @@ kern_msgsnd(td, msqid, msgp, msgsz, msgf
 			wakeup(msqkptr);
 			goto done3;
 		}
-		mtx_lock(&msq_mtx);
+		mtx_lock(&V_msq_mtx);
 		msgsz -= tlen;
 		msgp = (const char *)msgp + tlen;
-		next = msgmaps[next].next;
+		next = V_msgmaps[next].next;
 	}
 	if (next != -1)
 		panic("didn't use all the msg segments");
@@ -1008,7 +1210,7 @@ done3:
 	}
 #endif
 done2:
-	mtx_unlock(&msq_mtx);
+	mtx_unlock(&V_msq_mtx);
 	return (error);
 }
 
@@ -1062,14 +1264,14 @@ kern_msgrcv(td, msqid, msgp, msgsz, msgt
 
 	msqix = IPCID_TO_IX(msqid);
 
-	if (msqix < 0 || msqix >= msginfo.msgmni) {
+	if (msqix < 0 || msqix >= V_msginfo.msgmni) {
 		DPRINTF(("msqid (%d) out of range (0<=msqid<%d)\n", msqix,
-		    msginfo.msgmni));
+		    V_msginfo.msgmni));
 		return (EINVAL);
 	}
 
-	msqkptr = &msqids[msqix];
-	mtx_lock(&msq_mtx);
+	msqkptr = &V_msqids[msqix];
+	mtx_lock(&V_msq_mtx);
 	if (msqkptr->u.msg_qbytes == 0) {
 		DPRINTF(("no such message queue id\n"));
 		error = EINVAL;
@@ -1207,7 +1409,7 @@ kern_msgrcv(td, msqid, msgp, msgsz, msgt
 		 */
 
 		DPRINTF(("msgrcv:  goodnight\n"));
-		error = msleep(msqkptr, &msq_mtx, (PZERO - 4) | PCATCH,
+		error = msleep(msqkptr, &V_msq_mtx, (PZERO - 4) | PCATCH,
 		    "msgrcv", 0);
 		DPRINTF(("msgrcv:  good morning (error=%d)\n", error));
 
@@ -1260,20 +1462,20 @@ kern_msgrcv(td, msqid, msgp, msgsz, msgt
 	 */
 
 	next = msghdr->msg_spot;
-	for (len = 0; len < msgsz; len += msginfo.msgssz) {
+	for (len = 0; len < msgsz; len += V_msginfo.msgssz) {
 		size_t tlen;
 
-		if (msgsz - len > msginfo.msgssz)
-			tlen = msginfo.msgssz;
+		if (msgsz - len > V_msginfo.msgssz)
+			tlen = V_msginfo.msgssz;
 		else
 			tlen = msgsz - len;
 		if (next <= -1)
 			panic("next too low #3");
-		if (next >= msginfo.msgseg)
+		if (next >= V_msginfo.msgseg)
 			panic("next out of range #3");
-		mtx_unlock(&msq_mtx);
-		error = copyout(&msgpool[next * msginfo.msgssz], msgp, tlen);
-		mtx_lock(&msq_mtx);
+		mtx_unlock(&V_msq_mtx);
+		error = copyout(&V_msgpool[next * V_msginfo.msgssz], msgp, tlen);
+		mtx_lock(&V_msq_mtx);
 		if (error != 0) {
 			DPRINTF(("error (%d) copying out message segment\n",
 			    error));
@@ -1282,7 +1484,7 @@ kern_msgrcv(td, msqid, msgp, msgsz, msgt
 			goto done2;
 		}
 		msgp = (char *)msgp + tlen;
-		next = msgmaps[next].next;
+		next = V_msgmaps[next].next;
 	}
 
 	/*
@@ -1293,7 +1495,7 @@ kern_msgrcv(td, msqid, msgp, msgsz, msgt
 	wakeup(msqkptr);
 	td->td_retval[0] = msgsz;
 done2:
-	mtx_unlock(&msq_mtx);
+	mtx_unlock(&V_msq_mtx);
 	return (error);
 }
 
@@ -1321,23 +1523,23 @@ static int
 sysctl_msqids(SYSCTL_HANDLER_ARGS)
 {
 
-	return (SYSCTL_OUT(req, msqids,
-	    sizeof(struct msqid_kernel) * msginfo.msgmni));
+	return (SYSCTL_OUT(req, V_msqids,
+	    sizeof(struct msqid_kernel) * V_msginfo.msgmni));
 }
 
-SYSCTL_INT(_kern_ipc, OID_AUTO, msgmax, CTLFLAG_RD, &msginfo.msgmax, 0,
+SYSCTL_VPS_INT(_kern_ipc, OID_AUTO, msgmax, CTLFLAG_RD, &VPS_NAME(msginfo.msgmax), 0,
     "Maximum message size");
-SYSCTL_INT(_kern_ipc, OID_AUTO, msgmni, CTLFLAG_RDTUN, &msginfo.msgmni, 0,
+SYSCTL_VPS_INT(_kern_ipc, OID_AUTO, msgmni, CTLFLAG_RDTUN, &VPS_NAME(msginfo.msgmni), 0,
     "Number of message queue identifiers");
-SYSCTL_INT(_kern_ipc, OID_AUTO, msgmnb, CTLFLAG_RDTUN, &msginfo.msgmnb, 0,
+SYSCTL_VPS_INT(_kern_ipc, OID_AUTO, msgmnb, CTLFLAG_RDTUN, &VPS_NAME(msginfo.msgmnb), 0,
     "Maximum number of bytes in a queue");
-SYSCTL_INT(_kern_ipc, OID_AUTO, msgtql, CTLFLAG_RDTUN, &msginfo.msgtql, 0,
+SYSCTL_VPS_INT(_kern_ipc, OID_AUTO, msgtql, CTLFLAG_RDTUN, &VPS_NAME(msginfo.msgtql), 0,
     "Maximum number of messages in the system");
-SYSCTL_INT(_kern_ipc, OID_AUTO, msgssz, CTLFLAG_RDTUN, &msginfo.msgssz, 0,
+SYSCTL_VPS_INT(_kern_ipc, OID_AUTO, msgssz, CTLFLAG_RDTUN, &VPS_NAME(msginfo.msgssz), 0,
     "Size of a message segment");
-SYSCTL_INT(_kern_ipc, OID_AUTO, msgseg, CTLFLAG_RDTUN, &msginfo.msgseg, 0,
+SYSCTL_VPS_INT(_kern_ipc, OID_AUTO, msgseg, CTLFLAG_RDTUN, &VPS_NAME(msginfo.msgseg), 0,
     "Number of message segments");
-SYSCTL_PROC(_kern_ipc, OID_AUTO, msqids, CTLTYPE_OPAQUE | CTLFLAG_RD,
+SYSCTL_VPS_PROC(_kern_ipc, OID_AUTO, msqids, CTLTYPE_OPAQUE | CTLFLAG_RD,
     NULL, 0, sysctl_msqids, "", "Message queue IDs");
 
 #ifdef COMPAT_FREEBSD32
@@ -1590,3 +1792,241 @@ freebsd7_msgctl(td, uap)
 
 #endif	/* COMPAT_FREEBSD4 || COMPAT_FREEBSD5 || COMPAT_FREEBSD6 ||
 	   COMPAT_FREEBSD7 */
+
+#ifdef VPS
+
+__attribute__ ((noinline, unused))
+int msg_snapshot_vps(struct vps_snapst_ctx *ctx, struct vps *vps)
+{
+	struct vps_dumpobj *o1;
+	struct vps_dump_sysvmsg_msginfo *vdmsginfo;
+	uint16 *vdmsgmaps;
+	struct vps_dump_sysvmsg_msg *vdmsghdrs;
+	struct vps_dump_sysvmsg_msqid *vdmsqids;
+	struct msginfo *msginfo;
+	struct msgmap *msgmaps;
+	struct msg *msghdrs;
+	struct msqid_kernel *msqids;
+	int i;
+
+	o1 = vdo_create(ctx, VPS_DUMPOBJT_SYSVMSG_VPS, M_WAITOK);
+	vdmsginfo = vdo_space(ctx, sizeof(*vdmsginfo), M_WAITOK);
+
+	msginfo = &VPS_VPS(vps, msginfo);
+	vdmsginfo->msgmax = msginfo->msgmax;
+	vdmsginfo->msgmni = msginfo->msgmni;
+	vdmsginfo->msgmnb = msginfo->msgmnb;
+	vdmsginfo->msgtql = msginfo->msgtql;
+	vdmsginfo->msgssz = msginfo->msgssz;
+	vdmsginfo->msgseg = msginfo->msgseg;
+	vdmsginfo->nfree_msgmaps = VPS_VPS(vps, nfree_msgmaps);
+	vdmsginfo->free_msgmaps = VPS_VPS(vps, free_msgmaps);
+	vdmsginfo->free_msghdrs_idx = VPS_VPS(vps, free_msghdrs) - VPS_VPS(vps, msghdrs);
+
+	/* msgpool */
+	vdo_append(ctx, VPS_VPS(vps, msgpool), msginfo->msgmax, M_WAITOK);
+
+	/* msgmaps */
+	msgmaps = VPS_VPS(vps, msgmaps);
+	vdmsgmaps = vdo_space(ctx, msginfo->msgseg * sizeof(uint16), M_WAITOK);
+	for (i = 0; i < msginfo->msgseg; i++) {
+		vdmsgmaps[i] = msgmaps[i].next;
+	}
+
+	/* msghdrs */
+	msghdrs = VPS_VPS(vps, msghdrs);
+	vdmsghdrs = vdo_space(ctx, sizeof(struct vps_dump_sysvmsg_msg) *
+		msginfo->msgtql, M_WAITOK);
+	for (i = 0; i < msginfo->msgtql; i++) {
+		vdmsghdrs[i].msg_next = -1;
+		if (msghdrs[i].msg_next != NULL)
+			vdmsghdrs[i].msg_next = msghdrs[i].msg_next - msghdrs;
+		vdmsghdrs[i].msg_type = msghdrs[i].msg_type;
+		vdmsghdrs[i].msg_ts = msghdrs[i].msg_ts;
+		vdmsghdrs[i].msg_spot = msghdrs[i].msg_spot;
+		/* XXX assert label == NULL */
+		vdmsghdrs[i].label = msghdrs[i].label;
+	}
+
+	/* msqids */
+	msqids = VPS_VPS(vps, msqids);
+	vdmsqids = vdo_space(ctx, sizeof(struct vps_dump_sysvmsg_msqid) *
+		msginfo->msgmni, M_WAITOK);
+	for (i = 0; i < msginfo->msgmni; i++) {
+		vdmsqids[i].msg_first = -1;
+		if (msqids[i].u.msg_first != NULL)
+			vdmsqids[i].msg_first = msqids[i].u.msg_first - msghdrs;
+		vdmsqids[i].msg_last = -1;
+		if (msqids[i].u.msg_last != NULL)
+			vdmsqids[i].msg_last = msqids[i].u.msg_last - msghdrs;
+		vdmsqids[i].msg_perm.cuid = msqids[i].u.msg_perm.cuid;
+		vdmsqids[i].msg_perm.cgid = msqids[i].u.msg_perm.cgid;
+		vdmsqids[i].msg_perm.uid = msqids[i].u.msg_perm.uid;
+		vdmsqids[i].msg_perm.gid = msqids[i].u.msg_perm.gid;
+		vdmsqids[i].msg_perm.mode = msqids[i].u.msg_perm.mode;
+		vdmsqids[i].msg_perm.seq = msqids[i].u.msg_perm.seq;
+		vdmsqids[i].msg_perm.key = msqids[i].u.msg_perm.key;
+		vdmsqids[i].msg_cbytes = msqids[i].u.msg_cbytes;
+		vdmsqids[i].msg_qnum = msqids[i].u.msg_qnum;
+		vdmsqids[i].msg_qbytes = msqids[i].u.msg_qbytes;
+		vdmsqids[i].msg_lspid = msqids[i].u.msg_lspid;
+		vdmsqids[i].msg_lrpid = msqids[i].u.msg_lrpid;
+		vdmsqids[i].msg_stime = msqids[i].u.msg_stime;
+		vdmsqids[i].msg_rtime = msqids[i].u.msg_rtime;
+		vdmsqids[i].msg_ctime = msqids[i].u.msg_ctime;
+		/* XXX assert label == NULL */
+		vdmsqids[i].label = msqids[i].label;
+		vdmsqids[i].cred = msqids[i].cred;
+	}
+
+	for (i = 0; i < msginfo->msgmni; i++) {
+		if (vdmsqids[i].cred != NULL)
+			vps_func->vps_snapshot_ucred(ctx, vps, vdmsqids[i].cred, M_WAITOK);
+	}
+
+	vdo_close(ctx);
+
+	return (0);
+}
+
+__attribute__ ((noinline, unused))
+int msg_snapshot_proc(struct vps_snapst_ctx *ctx, struct vps *vps, struct proc *p)
+{
+
+	return (0);
+}
+
+__attribute__ ((noinline, unused))
+int msg_restore_vps(struct vps_snapst_ctx *ctx, struct vps *vps)
+{
+	struct vps_dumpobj *o1;
+	struct vps_dump_sysvmsg_msginfo *vdmsginfo;
+	uint16 *vdmsgmaps;
+	struct vps_dump_sysvmsg_msg *vdmsghdrs;
+	struct vps_dump_sysvmsg_msqid *vdmsqids;
+	struct msginfo *msginfo;
+	struct msgmap *msgmaps;
+	struct msg *msghdrs;
+	struct msqid_kernel *msqids;
+	struct vps *vps_save;
+	struct ucred *ncr;
+	caddr_t cpos;
+	int i;
+
+	o1 = vdo_next(ctx);
+	if (o1->type != VPS_DUMPOBJT_SYSVMSG_VPS) {
+		printf("%s: o1=%p is not VPS_DUMPOBJT_SYSVMSG_VPS\n",
+			__func__, o1);
+		return (EINVAL);
+	}
+	vdmsginfo = (struct vps_dump_sysvmsg_msginfo *)o1->data;
+
+	/* realloc in case msginfo is different */
+	vps_save = curthread->td_vps;
+	curthread->td_vps = vps;
+	msgunload();
+	msginfo = &VPS_VPS(vps, msginfo);
+	msginfo->msgmax = vdmsginfo->msgmax;
+	msginfo->msgmni = vdmsginfo->msgmni;
+	msginfo->msgmnb = vdmsginfo->msgmnb;
+	msginfo->msgtql = vdmsginfo->msgtql;
+	msginfo->msgssz = vdmsginfo->msgssz;
+	msginfo->msgseg = vdmsginfo->msgseg;
+	msginit2();
+	curthread->td_vps = vps_save;
+
+	cpos = (caddr_t)(vdmsginfo + 1);
+
+	/* msgpool */
+	memcpy(VPS_VPS(vps, msgpool), cpos, msginfo->msgmax);
+	cpos += msginfo->msgmax;
+
+	/* msgmaps */
+	msgmaps = VPS_VPS(vps, msgmaps);
+	vdmsgmaps = (uint16 *)cpos;
+	cpos += sizeof(uint16) * msginfo->msgseg;
+	for (i = 0; i < msginfo->msgseg; i++) {
+		msgmaps[i].next = vdmsgmaps[i];
+	}
+
+	/* msghdrs */
+	msghdrs = VPS_VPS(vps, msghdrs);
+	vdmsghdrs = (struct vps_dump_sysvmsg_msg *)cpos;
+	cpos += sizeof(*vdmsghdrs) * msginfo->msgtql;
+	for (i = 0; i < msginfo->msgtql; i++) {
+		msghdrs[i].msg_next = NULL;
+		if (vdmsghdrs[i].msg_next != -1)
+			msghdrs[i].msg_next = msghdrs + vdmsghdrs[i].msg_next;
+		msghdrs[i].msg_type = vdmsghdrs[i].msg_type;
+		msghdrs[i].msg_ts = vdmsghdrs[i].msg_ts;
+		msghdrs[i].msg_spot = vdmsghdrs[i].msg_spot;
+		/* XXX assert label == NULL */
+		//msghdrs[i].label = vdmsghdrs[i].label;
+		msghdrs[i].label = NULL;
+
+	}
+
+	/* msqids */
+	msqids = VPS_VPS(vps, msqids);
+	vdmsqids = (struct vps_dump_sysvmsg_msqid *)cpos;
+	cpos += sizeof(*vdmsqids) * msginfo->msgmni;
+	for (i = 0; i < msginfo->msgmni; i++) {
+		msqids[i].u.msg_first = NULL;
+		if (vdmsqids[i].msg_first != -1)
+			msqids[i].u.msg_first = msghdrs + vdmsqids[i].msg_first;
+		msqids[i].u.msg_last = NULL;
+		if (vdmsqids[i].msg_last != -1)
+			msqids[i].u.msg_last = msghdrs + vdmsqids[i].msg_last;
+		msqids[i].u.msg_perm.cuid = vdmsqids[i].msg_perm.cuid;
+		msqids[i].u.msg_perm.cgid = vdmsqids[i].msg_perm.cgid;
+		msqids[i].u.msg_perm.uid = vdmsqids[i].msg_perm.uid;
+		msqids[i].u.msg_perm.gid = vdmsqids[i].msg_perm.gid;
+		msqids[i].u.msg_perm.mode = vdmsqids[i].msg_perm.mode;
+		msqids[i].u.msg_perm.seq = vdmsqids[i].msg_perm.seq;
+		msqids[i].u.msg_perm.key = vdmsqids[i].msg_perm.key;
+		msqids[i].u.msg_cbytes = vdmsqids[i].msg_cbytes;
+		msqids[i].u.msg_qnum = vdmsqids[i].msg_qnum;
+		msqids[i].u.msg_qbytes = vdmsqids[i].msg_qbytes;
+		msqids[i].u.msg_lspid = vdmsqids[i].msg_lspid;
+		msqids[i].u.msg_lrpid = vdmsqids[i].msg_lrpid;
+		msqids[i].u.msg_stime = vdmsqids[i].msg_stime;
+		msqids[i].u.msg_rtime = vdmsqids[i].msg_rtime;
+		msqids[i].u.msg_ctime = vdmsqids[i].msg_ctime;
+		/* XXX assert label == NULL */
+		msqids[i].label = vdmsqids[i].label;
+		msqids[i].cred = vdmsqids[i].cred;
+	}
+
+	VPS_VPS(vps, nfree_msgmaps) = vdmsginfo->nfree_msgmaps;
+	VPS_VPS(vps, free_msgmaps) = vdmsginfo->free_msgmaps;
+	VPS_VPS(vps, free_msghdrs) = VPS_VPS(vps, msghdrs) + vdmsginfo->free_msghdrs_idx;
+
+	while (vdo_typeofnext(ctx) == VPS_DUMPOBJT_UCRED)
+		vdo_next(ctx);//vps_func->vps_restore_ucred(ctx, vps);
+
+	for (i = 0; i < msginfo->msgmni; i++)
+		if (msqids[i].cred != NULL) {
+			ncr = vps_func->vps_restore_ucred_lookup(ctx, vps,
+					msqids[i].cred);
+			msqids[i].cred = ncr;
+		}
+
+	return (0);
+}
+
+__attribute__ ((noinline, unused))
+int msg_restore_proc(struct vps_snapst_ctx *ctx, struct vps *vps, struct proc *p)
+{
+
+	return (0);
+}
+
+__attribute__ ((noinline, unused))
+int msg_restore_fixup(struct vps_snapst_ctx *ctx, struct vps *vps)
+{
+
+	return (0);
+}
+
+#endif /* VPS */
+
