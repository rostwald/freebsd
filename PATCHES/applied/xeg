diff -Naupr -x .svn -x 'rsync_vps.*' -I '$Id.*$' -I '$FreeBSD.*$' 10.0.0-stripped/sys/kern/sys_generic.c trunk-clean/sys/kern/sys_generic.c
--- 10.0.0-stripped/sys/kern/sys_generic.c	2014-01-15 14:20:22.000000000 +0100
+++ trunk-clean/sys/kern/sys_generic.c	2014-01-15 14:31:10.000000000 +0100
@@ -90,7 +90,11 @@ SYSCTL_INT(_debug, OID_AUTO, devfs_iosiz
 CTASSERT(sizeof(register_t) >= sizeof(size_t));
 
 static MALLOC_DEFINE(M_IOCTLOPS, "ioctlops", "ioctl data buffer");
+#ifdef VPS
+MALLOC_DEFINE(M_SELECT, "select", "select() buffer");
+#else
 static MALLOC_DEFINE(M_SELECT, "select", "select() buffer");
+#endif
 MALLOC_DEFINE(M_IOV, "iov", "large iov's");
 
 static int	pollout(struct thread *, struct pollfd *, struct pollfd *,
@@ -99,13 +103,16 @@ static int	pollscan(struct thread *, str
 static int	pollrescan(struct thread *);
 static int	selscan(struct thread *, fd_mask **, fd_mask **, int);
 static int	selrescan(struct thread *, fd_mask **, fd_mask **);
+#ifndef VPS
 static void	selfdalloc(struct thread *, void *);
 static void	selfdfree(struct seltd *, struct selfd *);
+#endif
 static int	dofileread(struct thread *, int, struct file *, struct uio *,
 		    off_t, int);
 static int	dofilewrite(struct thread *, int, struct file *, struct uio *,
 		    off_t, int);
 static void	doselwakeup(struct selinfo *, int);
+#ifndef VPS
 static void	seltdinit(struct thread *);
 static int	seltdwait(struct thread *, sbintime_t, sbintime_t);
 static void	seltdclear(struct thread *);
@@ -140,8 +147,13 @@ struct selfd {
 	struct seltd		*sf_td;		/* (k) owning seltd. */
 	void			*sf_cookie;	/* (k) fd or pollfd. */
 };
+#endif
 
+#ifdef VPS
+uma_zone_t selfd_zone;
+#else
 static uma_zone_t selfd_zone;
+#endif
 static struct mtx_pool *mtxpool_select;
 
 #ifndef _SYS_SYSPROTO_H_
@@ -1580,7 +1592,11 @@ selsocket(struct socket *so, int events,
  * Preallocate two selfds associated with 'cookie'.  Some fo_poll routines
  * have two select sets, one for read and another for write.
  */
+#ifdef VPS
+void
+#else
 static void
+#endif
 selfdalloc(struct thread *td, void *cookie)
 {
 	struct seltd *stp;
@@ -1596,7 +1612,11 @@ selfdalloc(struct thread *td, void *cook
 	stp->st_free2->sf_cookie = cookie;
 }
 
+#ifdef VPS
+void
+#else
 static void
+#endif
 selfdfree(struct seltd *stp, struct selfd *sfp)
 {
 	STAILQ_REMOVE(&stp->st_selq, sfp, selfd, sf_link);
@@ -1728,7 +1748,11 @@ doselwakeup(sip, pri)
 	mtx_unlock(sip->si_mtx);
 }
 
+#ifdef VPS
+void
+#else
 static void
+#endif
 seltdinit(struct thread *td)
 {
 	struct seltd *stp;
@@ -1743,7 +1767,11 @@ out:
 	STAILQ_INIT(&stp->st_selq);
 }
 
+#ifdef VPS
+int
+#else
 static int
+#endif
 seltdwait(struct thread *td, sbintime_t sbt, sbintime_t precision)
 {
 	struct seltd *stp;
@@ -1795,7 +1823,11 @@ seltdfini(struct thread *td)
  * Remove the references to the thread from all of the objects we were
  * polling.
  */
+#ifdef VPS
+void
+#else
 static void
+#endif
 seltdclear(struct thread *td)
 {
 	struct seltd *stp;
