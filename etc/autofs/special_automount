#!/bin/sh
#
# $FreeBSD$
#

# Print newline-separated list of devices available for mounting.
# If there is a filesystem label - use it, otherwise use device name.
print_available() {
	local _fstype _fstype_and_label _label _p

	for _p in ${providers}; do
		_fstype_and_label="$(fstyp "/dev/${_p}" 2> /dev/null)"
		if [ $? -ne 0 ]; then
			# Ignore devices for which we were unable
			# to determine filesystem type.
			continue
		fi

		_fstype="${_fstype_and_label%% *}"

		echo "${_p}"
	done
}

# Print a single map entry.
print_map_entry() {
	local _fstype _p

	_fstype="$1"
	_p="$2"

	case "${_fstype}" in
	"ext2fs")
		echo "-fstype=${_fstype},nosuid,async,-M=777	:/dev/${_p}" 
		;;
	"ext4")
		if [ -f "/usr/local/bin/ext4fuse" ]; then
			echo "-mountprog=/usr/local/bin/ext4fuse,fstype=${_fstype},nosuid,-M=777	:/dev/${_p}" 
		else
			/usr/bin/logger -p info -t "special_media[$$]" \
			    "Cannot mount ${_fstype} formatted device /dev/${_p}: Install sysutils/fusefs-ext4fuse first"
			exit 1
		fi
		;;
	"msdosfs")
		echo "-fstype=${_fstype},nosuid,async,-M=777,-o=longnames	:/dev/${_p}" 
		;;
	"exfat")
		#NOTE: EXFAT might be detected as an invalid NTFS - will probably need some verification/adjustment
		if [ -f "/usr/local/sbin/mount.exfat-fuse" ]; then
			echo "-mountprog=/usr/local/sbin/mount.exfat-fuse,fstype=${_fstype},nosuid,async	:/dev/${_p}" 
		else
			/usr/bin/logger -p info -t "special_media[$$]" \
			    "Cannot mount ${_fstype} formatted device /dev/${_p}: Install sysutils/fusefs-exfat first"
			exit 1
		fi
		;;
	"ntfs")
		if [ -f "/usr/local/bin/ntfs-3g" ]; then
			echo "-mountprog=/usr/local/bin/ntfs-3g,fstype=${_fstype},nosuid	:/dev/${_p}" 
		else
			/usr/bin/logger -p info -t "special_media[$$]" \
			    "Cannot mount ${_fstype} formatted device /dev/${_p}: Install sysutils/fusefs-ntfs first"
			exit 1
		fi
		;;
	"cd9660")
		echo "-fstype=${_fstype},nosuid,ro	:/dev/${_p}" 
		;;
	"mtpfs")
		if [ -f "/usr/local/bin/simple-mtpfs" ]; then
			echo "-mountprog=/usr/local/bin/simple-mtpfs,-fstype=${_fstype},nosuid,-o=allow_other	:/dev/${_p}" 
		else
			/usr/bin/logger -p info -t "special_media[$$]" \
			    "Cannot mount ${_fstype} formatted device /dev/${_p}: Install sysutils/fusefs-simple-mtpfs first"
			exit 1
		fi
		;;
	*)
		#Basic Mounting command:
		#This works for: ufs, reiserfs, xfs, and udf
		echo "-fstype=${_fstype},nosuid	:/dev/${_p}" 
		;;
	esac
}

# Determine map entry contents for the given key and print out the entry.
print_one() {
	local _fstype _fstype_and_label _label _key _p

	_key="$1"

	_fstype="$(fstyp "/dev/${_key}" 2> /dev/null)"
	if [ $? -eq 0 ]; then
		print_map_entry "${_fstype}" "${_key}"
		return
	fi

	for _p in ${providers}; do
		_fstype_and_label="$(fstyp "/dev/${_p}" 2> /dev/null)"
		if [ $? -ne 0 ]; then
			# Ignore devices for which we were unable
			# to determine filesystem type.
			continue
		fi

		_fstype="${_fstype_and_label%% *}"

		_label="${_fstype_and_label#* }"
		# Replace plus signs and slashes with minuses;
		# leading plus signs have special meaning in maps,
		# and multi-component keys are just not supported.
		_label="$(echo ${_label} | sed 's,[+/],-,g')"
		if [ "${_label}" != "${_key}" ]; then
			# Labels don't match, try another device.
			continue
		fi

		print_map_entry "${_fstype}" "${_p}"
	done

	# No matching device - don't print anything, autofs will handle it.
}

# Obtain a list of (geom-provider-name, access-count) pairs, turning this:
#
# z0xfffff80005085d00 [shape=hexagon,label="ada0\nr2w2e3\nerr#0\nsector=512\nstripe=0"];
#
# Into this:
#
# ada0 r2w2e3
#
# XXX: It would be easier to use kern.geom.conftxt instead, but it lacks
#      access counts.
pairs=$(sysctl kern.geom.confdot | sed -n 's/^.*hexagon,label="\([^\]*\)\\n\([^\]*\).*/\1 \2/p')

# Obtain a list of GEOM providers that are not already open - not mounted,
# and without other GEOM class, such as gpart, attached.  In other words,
# grep for "r0w0e0".  Skip providers with names containing slashes; we're
# not interested in geom_label(4) creations.
providers=$(echo "$pairs" | awk '$2 == "r0w0e0" && $1 !~ /\// { print $1 }')

if [ $# -eq 0 ]; then
	print_available
	exit 0
fi

print_one "$1"
exit 0
