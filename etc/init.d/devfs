#!/sbin/openrc-run

name="devfs"
devfs_rulesets="/etc/devfs.rules"

depend() {
        need localmount
        keyword -jail -prefix -stop
}

# devfs_rulesets_from_file file
#	Reads a set of devfs commands from file, and creates
#	the specified rulesets with their rules. Returns non-zero
#	if there was an error.
#
devfs_rulesets_from_file()
{
	local file _err _me _opts
	file="$1"
	_me="devfs_rulesets_from_file"
	_err=0

	if [ -z "$file" ]; then
		ewarn "$_me: you must specify a file"
		return 1
	fi
	if [ ! -e "$file" ]; then
		einfo "$_me: no such file ($file)"
		return 0
	fi

	# Disable globbing so that the rule patterns are not expanded
	# by accident with matching filesystem entries.
	_opts=$-; set -f

	#einfo "reading rulesets from file ($file)"
	{ while read line
	do
		case $line in
		\#*)
			continue
			;;
		\[*\]*)
			rulenum=`expr "$line" : "\[.*=\([0-9]*\)\]"`
			if [ -z "$rulenum" ]; then
				ewarn "$_me: cannot extract rule number ($line)"
				_err=1
				break
			fi
			rulename=`expr "$line" : "\[\(.*\)=[0-9]*\]"`
			if [ -z "$rulename" ]; then
				ewarn "$_me: cannot extract rule name ($line)"
				_err=1
				break;
			fi
			eval $rulename=\$rulenum
			#einfo "found ruleset: $rulename=$rulenum"

			if ! /sbin/devfs rule -s $rulenum delset; then
				_err=1
				break
			fi
			;;
		*)
			rulecmd="${line%%"\#*"}"
			# evaluate the command incase it includes
			# other rules
			if [ -n "$rulecmd" ]; then
				#einfo "adding rule ($rulecmd)"
				if ! eval /sbin/devfs rule -s $rulenum $rulecmd
				then
					_err=1
					break
				fi
			fi
			;;
		esac
		if [ $_err -ne 0 ]; then
			ewarn "error in $_me"
			break
		fi
	done } < $file
	case $_opts in *f*) ;; *) set +f ;; esac
	return $_err
}

# devfs_init_rulesets
#	Initializes rulesets from configuration files. Returns
#	non-zero if there was an error.
#
devfs_init_rulesets()
{
	local file _me
	_me="devfs_init_rulesets"

	# Go through this only once
	if [ -n "$devfs_rulesets_init" ]; then
		einfo "$_me: devfs rulesets already initialized"
		return
	fi
	for file in $devfs_rulesets; do
		if ! devfs_rulesets_from_file $file; then
			ewarn "$_me: could not read rules from $file"
			return 1
		fi
	done
	devfs_rulesets_init=1
	#einfo "$_me: devfs rulesets initialized"
	return 0
}

# devfs_set_ruleset ruleset [dir]
#	Sets the default ruleset of dir to ruleset. The ruleset argument
#	must be a ruleset name as specified in devfs.rules(5) file.
#	Returns non-zero if it could not set it successfully.
#
devfs_set_ruleset()
{
	local devdir rs _me
	[ -n "$1" ] && rs=$1 || rs=
	[ -n "$2" ] && devdir="-m "$2"" || devdir=
	_me="devfs_set_ruleset"

	# Get the ruleset number
	rs=`grep "^\[${1}=" /etc/devfs.rules | cut -d = -f 2 | sed 's|]||g' | tr -d ' '`

	if [ -z "$rs" ]; then
		ewarn "$_me: you must specify a ruleset number"
		return 1
	fi
	#einfo "$_me: setting ruleset ($rs) on mount-point (${devdir#-m })"
	if ! /sbin/devfs $devdir ruleset $rs; then
		ewarn "$_me: unable to set ruleset $rs to ${devdir#-m }"
		return 1
	fi
	return 0
}

# devfs_apply_ruleset ruleset [dir]
#	Apply ruleset number $ruleset to the devfs mountpoint $dir.
#	The ruleset argument must be a ruleset name as specified
#	in a devfs.rules(5) file.  Returns 0 on success or non-zero
#	if it could not apply the ruleset.
#
devfs_apply_ruleset()
{
	local devdir rs _me
	[ -n "$2" ] && devdir="-m "$2"" || devdir=
	_me="devfs_apply_ruleset"

	# Get the ruleset number
	rs=`grep "^\[${1}=" /etc/devfs.rules | cut -d = -f 2 | sed 's|]||g' | tr -d ' '`

	if [ -z "$rs" ]; then
		ewarn "$_me: you must specify a ruleset"
		return 1
	fi
	#einfo "$_me: applying ruleset ($rs) to mount-point (${devdir#-m })"
	if ! /sbin/devfs $devdir rule -s $rs applyset; then
		ewarn "$_me: unable to apply ruleset $rs to ${devdir#-m }"
		return 1
	fi
	return 0
}

# devfs_domount dir [ruleset]
#	Mount devfs on dir. If ruleset is specified it is set
#	on the mount-point. It must also be a ruleset name as specified
#	in a devfs.rules(5) file. Returns 0 on success.
#
devfs_domount()
{
	local devdir rs _me
	devdir="$1"
	[ -n "$2" ] && rs=$2 || rs=
	_me="devfs_domount()"

	if [ -z "$devdir" ]; then
		ewarn "$_me: you must specify a mount-point"
		return 1
	fi
	einfo "$_me: mount-point is ($devdir), ruleset is ($rs)"
	if ! mount -t devfs dev "$devdir"; then
		ewarn "$_me: Unable to mount devfs on $devdir"
		return 1
	fi
	if [ -n "$rs" ]; then
		devfs_init_rulesets
		devfs_set_ruleset $rs $devdir
		devfs -m $devdir rule applyset
	fi
	return 0
}

devfs_apply()
{
	if [ ! -e /etc/devfs.rules ] ; then return 1 ; fi	
	if [ -z "$devfs_system_ruleset" ] ; then devfs_system_ruleset="devfsrules_common"; fi
	if [ -n "$devfs_system_ruleset" -o -n "$devfs_set_rulesets" ]; then
		devfs_init_rulesets
		if [ -n "$devfs_system_ruleset" ]; then
			devfs_set_ruleset $devfs_system_ruleset /dev
			devfs_apply_ruleset $devfs_system_ruleset /dev
		fi
		if [ -n "$devfs_set_rulesets" ]; then
			local _dir_set
			local _dir
			local _set
			for _dir_set in $devfs_set_rulesets; do
				_dir=${_dir_set%=*}
				_set=${_dir_set#*=}
				devfs_set_ruleset $_set $_dir
				devfs_apply_ruleset $_set $_dir
			done
		fi
	fi
	read_devfs_conf
}

read_devfs_conf()
{
	if [ -r /etc/devfs.conf ]; then
		cd /dev
		while read action devicelist parameter; do
			case "${action}" in
			l*)	for device in ${devicelist}; do
					if [ ! -e ${parameter} ]; then
						ln -fs ${device} ${parameter}
					fi
				done
				;;
			o*)	for device in ${devicelist}; do
					if [ -c ${device} ]; then
						chown ${parameter} ${device}
					fi
				done
				;;
			p*)	for device in ${devicelist}; do
					if [ -c ${device} ]; then
						chmod ${parameter} ${device}
					fi
				done
				;;
			esac
		done < /etc/devfs.conf
	fi
}

start()
{
	ebegin "Starting $name"
	devfs_apply
	eend $?
}

stop() {
	ebegin "Stopping $name"
	eend $?
}
