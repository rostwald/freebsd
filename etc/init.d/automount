#!/sbin/openrc-run

name="NFS Automount Client"
command="/usr/sbin/automount"
command_args=${automount_flags}
desktop_generator="/usr/local/bin/trueos-mount"
extra_actions=clean_shortcuts

tmp_proc_flag="/tmp/.automount.isrunning"

depend()
{
	need localmount nfsclient automountd autounmountd
	use net logger dns
	before inetd xinetd
}

stop()
{
	/sbin/umount -At autofs
}

clean_shortcuts()
{
  #Cleanup any device *.desktop files within the /media directory
  for i in `ls /media | grep -E "^(da|ada)[0-9].*(.desktop)"` ; do
    rm /media/${i}
  done
  return 0
}

stop_post()
{
  clean_shortcuts
  rm ${tmp_proc_flag} 1>/dev/null 2>/dev/null
  return 0
}

start(){
  clean_shortcuts
  #Note: This command is a one-off, it does not remain running persistantly.
  # As such, create/use a sentinal flag/file for determining if the service has been started yet (for status reporting)
  touch ${tmp_proc_flag}
  ${command} ${command_args}
  return 0 #don't worry about the return code of the autmount command - the automountd service is what handles the main daemon
}

status(){
  if [ -f ${tmp_proc_flag} ] ; then
    exit 0
  else
    return 1
  fi
}

skip_device()
{
  #internal function which checks if the argument is currently in-use
  #and returns 0 if unused
  dev=$1
  if [ -z "${activelist}" ] ; then
    #Load all the mount/zpool information if first-run
    mntlist=`/sbin/mount`
    zlist=`/sbin/zpool list -vH`
    activelist="${tmp}
${zlist}"
    unset mntlist
    unset zlist
    #einfo "#activelist: ${activelist}"
  fi
  tmp=`echo "${activelist}" | grep ${dev}`
  if [ -z "${tmp}" ] ; then
    return 0
  else
    return 1
  fi
}

start_post()
{
  #Generate any device *.desktop files within the /media directory for things that are currently attached but unmounted
  
  if [ -e ${desktop_generator} ] ; then
    for i in `ls /dev | grep -E "^(da|ada|cd|acd).*"` ; do
      einfo "Checking device ${i}"
      skip_device ${i}
      if [ $? -eq 0 ] ; then
        #einfo "Generate Shortcut ${i}"
        ${desktop_generator} ${i} 1>/dev/null 2>/dev/null
      fi
    done

  fi
  return 0
}
